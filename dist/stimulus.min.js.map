{"version":3,"file":"stimulus.min.js","sources":["../src/core/event_listener.ts","../src/core/dispatcher.ts","../src/core/action_descriptor.ts","../src/core/string_helpers.ts","../src/core/utils.ts","../src/core/action.ts","../src/core/binding.ts","../src/mutation-observers/element_observer.ts","../src/mutation-observers/attribute_observer.ts","../src/multimap/set_operations.ts","../src/multimap/multimap.ts","../src/multimap/indexed_multimap.ts","../src/mutation-observers/selector_observer.ts","../src/mutation-observers/string_map_observer.ts","../src/mutation-observers/token_list_observer.ts","../src/mutation-observers/value_list_observer.ts","../src/core/binding_observer.ts","../src/core/value_observer.ts","../src/core/target_observer.ts","../src/core/inheritable_statics.ts","../src/core/outlet_observer.ts","../src/core/context.ts","../src/core/blessing.ts","../src/core/module.ts","../src/core/definition.ts","../src/core/class_map.ts","../src/core/data_map.ts","../src/core/guide.ts","../src/core/selectors.ts","../src/core/target_set.ts","../src/core/outlet_set.ts","../src/core/scope.ts","../src/core/scope_observer.ts","../src/core/router.ts","../src/core/schema.ts","../src/core/application.ts","../src/core/value_properties.ts","../src/core/controller.ts","../src/core/class_properties.ts","../src/core/target_properties.ts","../src/core/outlet_properties.ts"],"sourcesContent":["import { Binding } from \"./binding\"\n\nexport class EventListener implements EventListenerObject {\n  readonly eventTarget: EventTarget\n  readonly eventName: string\n  readonly eventOptions: AddEventListenerOptions\n  private unorderedBindings: Set<Binding>\n\n  constructor(eventTarget: EventTarget, eventName: string, eventOptions: AddEventListenerOptions) {\n    this.eventTarget = eventTarget\n    this.eventName = eventName\n    this.eventOptions = eventOptions\n    this.unorderedBindings = new Set()\n  }\n\n  connect() {\n    this.eventTarget.addEventListener(this.eventName, this, this.eventOptions)\n  }\n\n  disconnect() {\n    this.eventTarget.removeEventListener(this.eventName, this, this.eventOptions)\n  }\n\n  // Binding observer delegate\n\n  bindingConnected(binding: Binding) {\n    this.unorderedBindings.add(binding)\n  }\n\n  bindingDisconnected(binding: Binding) {\n    this.unorderedBindings.delete(binding)\n  }\n\n  handleEvent(event: Event) {\n    // FIXME: Determine why TS won't recognize that the extended event has immediatePropagationStopped\n    const extendedEvent = extendEvent(event) as any\n    for (const binding of this.bindings) {\n      if (extendedEvent.immediatePropagationStopped) {\n        break\n      } else {\n        binding.handleEvent(extendedEvent)\n      }\n    }\n  }\n\n  hasBindings() {\n    return this.unorderedBindings.size > 0\n  }\n\n  get bindings(): Binding[] {\n    return Array.from(this.unorderedBindings).sort((left, right) => {\n      const leftIndex = left.index,\n        rightIndex = right.index\n      return leftIndex < rightIndex ? -1 : leftIndex > rightIndex ? 1 : 0\n    })\n  }\n}\n\nfunction extendEvent(event: Event) {\n  if (\"immediatePropagationStopped\" in event) {\n    return event\n  } else {\n    const { stopImmediatePropagation } = event\n    return Object.assign(event, {\n      immediatePropagationStopped: false,\n      stopImmediatePropagation() {\n        this.immediatePropagationStopped = true\n        stopImmediatePropagation.call(this)\n      },\n    })\n  }\n}\n","import { Application } from \"./application\"\nimport { Binding } from \"./binding\"\nimport { BindingObserverDelegate } from \"./binding_observer\"\nimport { EventListener } from \"./event_listener\"\n\nexport class Dispatcher implements BindingObserverDelegate {\n  readonly application: Application\n  private eventListenerMaps: Map<EventTarget, Map<string, EventListener>>\n  private started: boolean\n\n  constructor(application: Application) {\n    this.application = application\n    this.eventListenerMaps = new Map()\n    this.started = false\n  }\n\n  start() {\n    if (!this.started) {\n      this.started = true\n      this.eventListeners.forEach((eventListener) => eventListener.connect())\n    }\n  }\n\n  stop() {\n    if (this.started) {\n      this.started = false\n      this.eventListeners.forEach((eventListener) => eventListener.disconnect())\n    }\n  }\n\n  get eventListeners(): EventListener[] {\n    return Array.from(this.eventListenerMaps.values()).reduce(\n      (listeners, map) => listeners.concat(Array.from(map.values())),\n      [] as EventListener[]\n    )\n  }\n\n  // Binding observer delegate\n\n  bindingConnected(binding: Binding) {\n    this.fetchEventListenerForBinding(binding).bindingConnected(binding)\n  }\n\n  bindingDisconnected(binding: Binding, clearEventListeners = false) {\n    this.fetchEventListenerForBinding(binding).bindingDisconnected(binding)\n    if (clearEventListeners) this.clearEventListenersForBinding(binding)\n  }\n\n  // Error handling\n\n  handleError(error: Error, message: string, detail: object = {}) {\n    this.application.handleError(error, `Error ${message}`, detail)\n  }\n\n  private clearEventListenersForBinding(binding: Binding) {\n    const eventListener = this.fetchEventListenerForBinding(binding)\n    if (!eventListener.hasBindings()) {\n      eventListener.disconnect()\n      this.removeMappedEventListenerFor(binding)\n    }\n  }\n\n  private removeMappedEventListenerFor(binding: Binding) {\n    const { eventTarget, eventName, eventOptions } = binding\n    const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget)\n    const cacheKey = this.cacheKey(eventName, eventOptions)\n\n    eventListenerMap.delete(cacheKey)\n    if (eventListenerMap.size == 0) this.eventListenerMaps.delete(eventTarget)\n  }\n\n  private fetchEventListenerForBinding(binding: Binding): EventListener {\n    const { eventTarget, eventName, eventOptions } = binding\n    return this.fetchEventListener(eventTarget, eventName, eventOptions)\n  }\n\n  private fetchEventListener(\n    eventTarget: EventTarget,\n    eventName: string,\n    eventOptions: AddEventListenerOptions\n  ): EventListener {\n    const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget)\n    const cacheKey = this.cacheKey(eventName, eventOptions)\n    let eventListener = eventListenerMap.get(cacheKey)\n    if (!eventListener) {\n      eventListener = this.createEventListener(eventTarget, eventName, eventOptions)\n      eventListenerMap.set(cacheKey, eventListener)\n    }\n    return eventListener\n  }\n\n  private createEventListener(\n    eventTarget: EventTarget,\n    eventName: string,\n    eventOptions: AddEventListenerOptions\n  ): EventListener {\n    const eventListener = new EventListener(eventTarget, eventName, eventOptions)\n    if (this.started) {\n      eventListener.connect()\n    }\n    return eventListener\n  }\n\n  private fetchEventListenerMapForEventTarget(eventTarget: EventTarget): Map<string, EventListener> {\n    let eventListenerMap = this.eventListenerMaps.get(eventTarget)\n    if (!eventListenerMap) {\n      eventListenerMap = new Map()\n      this.eventListenerMaps.set(eventTarget, eventListenerMap)\n    }\n    return eventListenerMap\n  }\n\n  private cacheKey(eventName: string, eventOptions: any): string {\n    const parts = [eventName]\n    Object.keys(eventOptions)\n      .sort()\n      .forEach((key) => {\n        parts.push(`${eventOptions[key] ? \"\" : \"!\"}${key}`)\n      })\n    return parts.join(\":\")\n  }\n}\n","export type ActionDescriptorFilters = Record<string, ActionDescriptorFilter>\nexport type ActionDescriptorFilter = (options: ActionDescriptorFilterOptions) => boolean\ntype ActionDescriptorFilterOptions = {\n  name: string\n  value: boolean\n  event: Event\n  element: Element\n}\n\nexport const defaultActionDescriptorFilters: ActionDescriptorFilters = {\n  stop({ event, value }) {\n    if (value) event.stopPropagation()\n\n    return true\n  },\n\n  prevent({ event, value }) {\n    if (value) event.preventDefault()\n\n    return true\n  },\n\n  self({ event, value, element }) {\n    if (value) {\n      return element === event.target\n    } else {\n      return true\n    }\n  },\n}\n\nexport interface ActionDescriptor {\n  eventTarget: EventTarget\n  eventOptions: AddEventListenerOptions\n  eventName: string\n  identifier: string\n  methodName: string\n  keyFilter: string\n}\n\n// capture nos.:                  1      1    2   2     3   3      4               4      5   5    6      6     7  7\nconst descriptorPattern = /^(?:(?:([^.]+?)\\+)?(.+?)(?:\\.(.+?))?(?:@(window|document))?->)?(.+?)(?:#([^:]+?))(?::(.+))?$/\n\nexport function parseActionDescriptorString(descriptorString: string): Partial<ActionDescriptor> {\n  const source = descriptorString.trim()\n  const matches = source.match(descriptorPattern) || []\n  let eventName = matches[2]\n  let keyFilter = matches[3]\n\n  if (keyFilter && ![\"keydown\", \"keyup\", \"keypress\"].includes(eventName)) {\n    eventName += `.${keyFilter}`\n    keyFilter = \"\"\n  }\n\n  return {\n    eventTarget: parseEventTarget(matches[4]),\n    eventName,\n    eventOptions: matches[7] ? parseEventOptions(matches[7]) : {},\n    identifier: matches[5],\n    methodName: matches[6],\n    keyFilter: matches[1] || keyFilter,\n  }\n}\n\nfunction parseEventTarget(eventTargetName: string): EventTarget | undefined {\n  if (eventTargetName == \"window\") {\n    return window\n  } else if (eventTargetName == \"document\") {\n    return document\n  }\n}\n\nfunction parseEventOptions(eventOptions: string): AddEventListenerOptions {\n  return eventOptions\n    .split(\":\")\n    .reduce((options, token) => Object.assign(options, { [token.replace(/^!/, \"\")]: !/^!/.test(token) }), {})\n}\n\nexport function stringifyEventTarget(eventTarget: EventTarget) {\n  if (eventTarget == window) {\n    return \"window\"\n  } else if (eventTarget == document) {\n    return \"document\"\n  }\n}\n","export function camelize(value: string) {\n  return value.replace(/(?:[_-])([a-z0-9])/g, (_, char) => char.toUpperCase())\n}\n\nexport function namespaceCamelize(value: string) {\n  return camelize(value.replace(/--/g, \"-\").replace(/__/g, \"_\"))\n}\n\nexport function capitalize(value: string) {\n  return value.charAt(0).toUpperCase() + value.slice(1)\n}\n\nexport function dasherize(value: string) {\n  return value.replace(/([A-Z])/g, (_, char) => `-${char.toLowerCase()}`)\n}\n\nexport function tokenize(value: string) {\n  return value.match(/[^\\s]+/g) || []\n}\n","export function isSomething(object: any): boolean {\n  return object !== null && object !== undefined\n}\n\nexport function hasProperty(object: any, property: string): boolean {\n  return Object.prototype.hasOwnProperty.call(object, property)\n}\n","import { ActionDescriptor, parseActionDescriptorString, stringifyEventTarget } from \"./action_descriptor\"\nimport { Token } from \"../mutation-observers\"\nimport { Schema } from \"./schema\"\nimport { camelize } from \"./string_helpers\"\nimport { hasProperty } from \"./utils\"\n\nconst allModifiers = [\"meta\", \"ctrl\", \"alt\", \"shift\"]\n\nexport class Action {\n  readonly element: Element\n  readonly index: number\n  readonly eventTarget: EventTarget\n  readonly eventName: string\n  readonly eventOptions: AddEventListenerOptions\n  readonly identifier: string\n  readonly methodName: string\n  readonly keyFilter: string\n  readonly schema: Schema\n\n  static forToken(token: Token, schema: Schema) {\n    return new this(token.element, token.index, parseActionDescriptorString(token.content), schema)\n  }\n\n  constructor(element: Element, index: number, descriptor: Partial<ActionDescriptor>, schema: Schema) {\n    this.element = element\n    this.index = index\n    this.eventTarget = descriptor.eventTarget || element\n    this.eventName = descriptor.eventName || getDefaultEventNameForElement(element) || error(\"missing event name\")\n    this.eventOptions = descriptor.eventOptions || {}\n    this.identifier = descriptor.identifier || error(\"missing identifier\")\n    this.methodName = descriptor.methodName || error(\"missing method name\")\n    this.keyFilter = descriptor.keyFilter || \"\"\n    this.schema = schema\n  }\n\n  toString() {\n    const eventFilter = this.keyFilter ? `.${this.keyFilter}` : \"\"\n    const eventTarget = this.eventTargetName ? `@${this.eventTargetName}` : \"\"\n    return `${this.eventName}${eventFilter}${eventTarget}->${this.identifier}#${this.methodName}`\n  }\n\n  shouldIgnoreKeyboardEvent(event: KeyboardEvent): boolean {\n    if (!this.keyFilter) {\n      return false\n    }\n\n    const filters = this.keyFilter.split(\"+\")\n    if (this.keyFilterDissatisfied(event, filters)) {\n      return true\n    }\n\n    const standardFilter = filters.filter((key) => !allModifiers.includes(key))[0]\n    if (!standardFilter) {\n      // missing non modifier key\n      return false\n    }\n\n    if (!hasProperty(this.keyMappings, standardFilter)) {\n      error(`contains unknown key filter: ${this.keyFilter}`)\n    }\n\n    return this.keyMappings[standardFilter].toLowerCase() !== event.key.toLowerCase()\n  }\n\n  shouldIgnoreMouseEvent(event: MouseEvent): boolean {\n    if (!this.keyFilter) {\n      return false\n    }\n\n    const filters = [this.keyFilter]\n    if (this.keyFilterDissatisfied(event, filters)) {\n      return true\n    }\n\n    return false\n  }\n\n  get params() {\n    const params: { [key: string]: any } = {}\n    const pattern = new RegExp(`^data-${this.identifier}-(.+)-param$`, \"i\")\n\n    for (const { name, value } of Array.from(this.element.attributes)) {\n      const match = name.match(pattern)\n      const key = match && match[1]\n      if (key) {\n        params[camelize(key)] = typecast(value)\n      }\n    }\n    return params\n  }\n\n  private get eventTargetName() {\n    return stringifyEventTarget(this.eventTarget)\n  }\n\n  private get keyMappings() {\n    return this.schema.keyMappings\n  }\n\n  private keyFilterDissatisfied(event: KeyboardEvent | MouseEvent, filters: Array<string>): boolean {\n    const [meta, ctrl, alt, shift] = allModifiers.map((modifier) => filters.includes(modifier))\n\n    return event.metaKey !== meta || event.ctrlKey !== ctrl || event.altKey !== alt || event.shiftKey !== shift\n  }\n}\n\nconst defaultEventNames: { [tagName: string]: (element: Element) => string } = {\n  a: () => \"click\",\n  button: () => \"click\",\n  form: () => \"submit\",\n  details: () => \"toggle\",\n  input: (e) => (e.getAttribute(\"type\") == \"submit\" ? \"click\" : \"input\"),\n  select: () => \"change\",\n  textarea: () => \"input\",\n}\n\nexport function getDefaultEventNameForElement(element: Element): string | undefined {\n  const tagName = element.tagName.toLowerCase()\n  if (tagName in defaultEventNames) {\n    return defaultEventNames[tagName](element)\n  }\n}\n\nfunction error(message: string): never {\n  throw new Error(message)\n}\n\nfunction typecast(value: any): any {\n  try {\n    return JSON.parse(value)\n  } catch (o_O) {\n    return value\n  }\n}\n","import { Action } from \"./action\"\nimport { ActionEvent } from \"./action_event\"\nimport { Context } from \"./context\"\nimport { Controller } from \"./controller\"\nimport { Scope } from \"./scope\"\nexport class Binding {\n  readonly context: Context\n  readonly action: Action\n\n  constructor(context: Context, action: Action) {\n    this.context = context\n    this.action = action\n  }\n\n  get index(): number {\n    return this.action.index\n  }\n\n  get eventTarget(): EventTarget {\n    return this.action.eventTarget\n  }\n\n  get eventOptions(): AddEventListenerOptions {\n    return this.action.eventOptions\n  }\n\n  get identifier(): string {\n    return this.context.identifier\n  }\n\n  handleEvent(event: Event) {\n    if (this.willBeInvokedByEvent(event) && this.applyEventModifiers(event)) {\n      this.invokeWithEvent(event)\n    }\n  }\n\n  get eventName(): string {\n    return this.action.eventName\n  }\n\n  get method(): Function {\n    const method = (this.controller as any)[this.methodName]\n    if (typeof method == \"function\") {\n      return method\n    }\n    throw new Error(`Action \"${this.action}\" references undefined method \"${this.methodName}\"`)\n  }\n\n  private applyEventModifiers(event: Event): boolean {\n    const { element } = this.action\n    const { actionDescriptorFilters } = this.context.application\n\n    let passes = true\n\n    for (const [name, value] of Object.entries(this.eventOptions)) {\n      if (name in actionDescriptorFilters) {\n        const filter = actionDescriptorFilters[name]\n\n        passes = passes && filter({ name, value, event, element })\n      } else {\n        continue\n      }\n    }\n\n    return passes\n  }\n\n  private invokeWithEvent(event: Event) {\n    const { target, currentTarget } = event\n    try {\n      const { params } = this.action\n      const actionEvent: ActionEvent = Object.assign(event, { params })\n      this.method.call(this.controller, actionEvent)\n      this.context.logDebugActivity(this.methodName, { event, target, currentTarget, action: this.methodName })\n    } catch (error: any) {\n      const { identifier, controller, element, index } = this\n      const detail = { identifier, controller, element, index, event }\n      this.context.handleError(error, `invoking action \"${this.action}\"`, detail)\n    }\n  }\n\n  private willBeInvokedByEvent(event: Event): boolean {\n    const eventTarget = event.target\n\n    if (event instanceof KeyboardEvent && this.action.shouldIgnoreKeyboardEvent(event)) {\n      return false\n    }\n\n    if (event instanceof MouseEvent && this.action.shouldIgnoreMouseEvent(event)) {\n      return false\n    }\n\n    if (this.element === eventTarget) {\n      return true\n    } else if (eventTarget instanceof Element && this.element.contains(eventTarget)) {\n      return this.scope.containsElement(eventTarget)\n    } else {\n      return this.scope.containsElement(this.action.element)\n    }\n  }\n\n  private get controller(): Controller {\n    return this.context.controller\n  }\n\n  private get methodName(): string {\n    return this.action.methodName\n  }\n\n  private get element(): Element {\n    return this.scope.element\n  }\n\n  private get scope(): Scope {\n    return this.context.scope\n  }\n}\n","export interface ElementObserverDelegate {\n  matchElement(element: Element): boolean\n  matchElementsInTree(tree: Element): Element[]\n\n  elementMatched?(element: Element): void\n  elementUnmatched?(element: Element): void\n  elementAttributeChanged?(element: Element, attributeName: string): void\n}\n\nexport class ElementObserver {\n  element: Element\n  started: boolean\n  private delegate: ElementObserverDelegate\n\n  private elements: Set<Element>\n  private mutationObserver: MutationObserver\n  private mutationObserverInit: MutationObserverInit = { attributes: true, childList: true, subtree: true }\n\n  constructor(element: Element, delegate: ElementObserverDelegate) {\n    this.element = element\n    this.started = false\n    this.delegate = delegate\n\n    this.elements = new Set()\n    this.mutationObserver = new MutationObserver((mutations) => this.processMutations(mutations))\n  }\n\n  start() {\n    if (!this.started) {\n      this.started = true\n      this.mutationObserver.observe(this.element, this.mutationObserverInit)\n      this.refresh()\n    }\n  }\n\n  pause(callback: () => void) {\n    if (this.started) {\n      this.mutationObserver.disconnect()\n      this.started = false\n    }\n\n    callback()\n\n    if (!this.started) {\n      this.mutationObserver.observe(this.element, this.mutationObserverInit)\n      this.started = true\n    }\n  }\n\n  stop() {\n    if (this.started) {\n      this.mutationObserver.takeRecords()\n      this.mutationObserver.disconnect()\n      this.started = false\n    }\n  }\n\n  refresh() {\n    if (this.started) {\n      const matches = new Set(this.matchElementsInTree())\n\n      for (const element of Array.from(this.elements)) {\n        if (!matches.has(element)) {\n          this.removeElement(element)\n        }\n      }\n\n      for (const element of Array.from(matches)) {\n        this.addElement(element)\n      }\n    }\n  }\n\n  // Mutation record processing\n\n  private processMutations(mutations: MutationRecord[]) {\n    if (this.started) {\n      for (const mutation of mutations) {\n        this.processMutation(mutation)\n      }\n    }\n  }\n\n  private processMutation(mutation: MutationRecord) {\n    if (mutation.type == \"attributes\") {\n      this.processAttributeChange(mutation.target as Element, mutation.attributeName!)\n    } else if (mutation.type == \"childList\") {\n      this.processRemovedNodes(mutation.removedNodes)\n      this.processAddedNodes(mutation.addedNodes)\n    }\n  }\n\n  private processAttributeChange(element: Element, attributeName: string) {\n    if (this.elements.has(element)) {\n      if (this.delegate.elementAttributeChanged && this.matchElement(element)) {\n        this.delegate.elementAttributeChanged(element, attributeName)\n      } else {\n        this.removeElement(element)\n      }\n    } else if (this.matchElement(element)) {\n      this.addElement(element)\n    }\n  }\n\n  private processRemovedNodes(nodes: NodeList) {\n    for (const node of Array.from(nodes)) {\n      const element = this.elementFromNode(node)\n      if (element) {\n        this.processTree(element, this.removeElement)\n      }\n    }\n  }\n\n  private processAddedNodes(nodes: NodeList) {\n    for (const node of Array.from(nodes)) {\n      const element = this.elementFromNode(node)\n      if (element && this.elementIsActive(element)) {\n        this.processTree(element, this.addElement)\n      }\n    }\n  }\n\n  // Element matching\n\n  private matchElement(element: Element): boolean {\n    return this.delegate.matchElement(element)\n  }\n\n  private matchElementsInTree(tree: Element = this.element): Element[] {\n    return this.delegate.matchElementsInTree(tree)\n  }\n\n  private processTree(tree: Element, processor: (element: Element) => void) {\n    for (const element of this.matchElementsInTree(tree)) {\n      processor.call(this, element)\n    }\n  }\n\n  private elementFromNode(node: Node): Element | undefined {\n    if (node.nodeType == Node.ELEMENT_NODE) {\n      return node as Element\n    }\n  }\n\n  private elementIsActive(element: Element): boolean {\n    if (element.isConnected != this.element.isConnected) {\n      return false\n    } else {\n      return this.element.contains(element)\n    }\n  }\n\n  // Element tracking\n\n  private addElement(element: Element) {\n    if (!this.elements.has(element)) {\n      if (this.elementIsActive(element)) {\n        this.elements.add(element)\n        if (this.delegate.elementMatched) {\n          this.delegate.elementMatched(element)\n        }\n      }\n    }\n  }\n\n  private removeElement(element: Element) {\n    if (this.elements.has(element)) {\n      this.elements.delete(element)\n      if (this.delegate.elementUnmatched) {\n        this.delegate.elementUnmatched(element)\n      }\n    }\n  }\n}\n","import { ElementObserver, ElementObserverDelegate } from \"./element_observer\"\n\nexport interface AttributeObserverDelegate {\n  elementMatchedAttribute?(element: Element, attributeName: string): void\n  elementAttributeValueChanged?(element: Element, attributeName: string): void\n  elementUnmatchedAttribute?(element: Element, attributeName: string): void\n}\n\nexport class AttributeObserver implements ElementObserverDelegate {\n  attributeName: string\n  private delegate: AttributeObserverDelegate\n\n  private elementObserver: ElementObserver\n\n  constructor(element: Element, attributeName: string, delegate: AttributeObserverDelegate) {\n    this.attributeName = attributeName\n    this.delegate = delegate\n\n    this.elementObserver = new ElementObserver(element, this)\n  }\n\n  get element(): Element {\n    return this.elementObserver.element\n  }\n\n  get selector(): string {\n    return `[${this.attributeName}]`\n  }\n\n  start() {\n    this.elementObserver.start()\n  }\n\n  pause(callback: () => void) {\n    this.elementObserver.pause(callback)\n  }\n\n  stop() {\n    this.elementObserver.stop()\n  }\n\n  refresh() {\n    this.elementObserver.refresh()\n  }\n\n  get started(): boolean {\n    return this.elementObserver.started\n  }\n\n  // Element observer delegate\n\n  matchElement(element: Element): boolean {\n    return element.hasAttribute(this.attributeName)\n  }\n\n  matchElementsInTree(tree: Element): Element[] {\n    const match = this.matchElement(tree) ? [tree] : []\n    const matches = Array.from(tree.querySelectorAll(this.selector))\n    return match.concat(matches)\n  }\n\n  elementMatched(element: Element) {\n    if (this.delegate.elementMatchedAttribute) {\n      this.delegate.elementMatchedAttribute(element, this.attributeName)\n    }\n  }\n\n  elementUnmatched(element: Element) {\n    if (this.delegate.elementUnmatchedAttribute) {\n      this.delegate.elementUnmatchedAttribute(element, this.attributeName)\n    }\n  }\n\n  elementAttributeChanged(element: Element, attributeName: string) {\n    if (this.delegate.elementAttributeValueChanged && this.attributeName == attributeName) {\n      this.delegate.elementAttributeValueChanged(element, attributeName)\n    }\n  }\n}\n","export function add<K, V>(map: Map<K, Set<V>>, key: K, value: V) {\n  fetch(map, key).add(value)\n}\n\nexport function del<K, V>(map: Map<K, Set<V>>, key: K, value: V) {\n  fetch(map, key).delete(value)\n  prune(map, key)\n}\n\nexport function fetch<K, V>(map: Map<K, Set<V>>, key: K): Set<V> {\n  let values = map.get(key)\n  if (!values) {\n    values = new Set()\n    map.set(key, values)\n  }\n  return values\n}\n\nexport function prune<K, V>(map: Map<K, Set<V>>, key: K) {\n  const values = map.get(key)\n  if (values != null && values.size == 0) {\n    map.delete(key)\n  }\n}\n","import { add, del } from \"./set_operations\"\n\nexport class Multimap<K, V> {\n  private valuesByKey: Map<K, Set<V>>\n\n  constructor() {\n    this.valuesByKey = new Map<K, Set<V>>()\n  }\n\n  get keys() {\n    return Array.from(this.valuesByKey.keys())\n  }\n\n  get values(): V[] {\n    const sets = Array.from(this.valuesByKey.values())\n    return sets.reduce((values, set) => values.concat(Array.from(set)), <V[]>[])\n  }\n\n  get size(): number {\n    const sets = Array.from(this.valuesByKey.values())\n    return sets.reduce((size, set) => size + set.size, 0)\n  }\n\n  add(key: K, value: V) {\n    add(this.valuesByKey, key, value)\n  }\n\n  delete(key: K, value: V) {\n    del(this.valuesByKey, key, value)\n  }\n\n  has(key: K, value: V): boolean {\n    const values = this.valuesByKey.get(key)\n    return values != null && values.has(value)\n  }\n\n  hasKey(key: K): boolean {\n    return this.valuesByKey.has(key)\n  }\n\n  hasValue(value: V): boolean {\n    const sets = Array.from(this.valuesByKey.values())\n    return sets.some((set) => set.has(value))\n  }\n\n  getValuesForKey(key: K): V[] {\n    const values = this.valuesByKey.get(key)\n    return values ? Array.from(values) : []\n  }\n\n  getKeysForValue(value: V): K[] {\n    return Array.from(this.valuesByKey)\n      .filter(([_key, values]) => values.has(value))\n      .map(([key, _values]) => key)\n  }\n}\n","import { Multimap } from \"./multimap\"\nimport { add, del } from \"./set_operations\"\n\nexport class IndexedMultimap<K, V> extends Multimap<K, V> {\n  private keysByValue: Map<V, Set<K>>\n\n  constructor() {\n    super()\n    this.keysByValue = new Map()\n  }\n\n  get values(): V[] {\n    return Array.from(this.keysByValue.keys())\n  }\n\n  add(key: K, value: V) {\n    super.add(key, value)\n    add(this.keysByValue, value, key)\n  }\n\n  delete(key: K, value: V) {\n    super.delete(key, value)\n    del(this.keysByValue, value, key)\n  }\n\n  hasValue(value: V): boolean {\n    return this.keysByValue.has(value)\n  }\n\n  getKeysForValue(value: V): K[] {\n    const set = this.keysByValue.get(value)\n    return set ? Array.from(set) : []\n  }\n}\n","import { ElementObserver, ElementObserverDelegate } from \"./element_observer\"\nimport { Multimap } from \"../multimap\"\n\nexport interface SelectorObserverDelegate {\n  selectorMatched(element: Element, selector: string, details: object): void\n  selectorUnmatched(element: Element, selector: string, details: object): void\n  selectorMatchElement?(element: Element, details: object): boolean\n}\n\nexport class SelectorObserver implements ElementObserverDelegate {\n  private readonly elementObserver: ElementObserver\n  private readonly delegate: SelectorObserverDelegate\n  private readonly matchesByElement: Multimap<string, Element>\n  private readonly details: object\n  _selector: string | null\n\n  constructor(element: Element, selector: string, delegate: SelectorObserverDelegate, details: object) {\n    this._selector = selector\n    this.details = details\n    this.elementObserver = new ElementObserver(element, this)\n    this.delegate = delegate\n    this.matchesByElement = new Multimap()\n  }\n\n  get started(): boolean {\n    return this.elementObserver.started\n  }\n\n  get selector() {\n    return this._selector\n  }\n\n  set selector(selector: string | null) {\n    this._selector = selector\n    this.refresh()\n  }\n\n  start() {\n    this.elementObserver.start()\n  }\n\n  pause(callback: () => void) {\n    this.elementObserver.pause(callback)\n  }\n\n  stop() {\n    this.elementObserver.stop()\n  }\n\n  refresh() {\n    this.elementObserver.refresh()\n  }\n\n  get element(): Element {\n    return this.elementObserver.element\n  }\n\n  // Element observer delegate\n\n  matchElement(element: Element): boolean {\n    const { selector } = this\n\n    if (selector) {\n      const matches = element.matches(selector)\n\n      if (this.delegate.selectorMatchElement) {\n        return matches && this.delegate.selectorMatchElement(element, this.details)\n      }\n\n      return matches\n    } else {\n      return false\n    }\n  }\n\n  matchElementsInTree(tree: Element): Element[] {\n    const { selector } = this\n\n    if (selector) {\n      const match = this.matchElement(tree) ? [tree] : []\n      const matches = Array.from(tree.querySelectorAll(selector)).filter((match) => this.matchElement(match))\n      return match.concat(matches)\n    } else {\n      return []\n    }\n  }\n\n  elementMatched(element: Element) {\n    const { selector } = this\n\n    if (selector) {\n      this.selectorMatched(element, selector)\n    }\n  }\n\n  elementUnmatched(element: Element) {\n    const selectors = this.matchesByElement.getKeysForValue(element)\n\n    for (const selector of selectors) {\n      this.selectorUnmatched(element, selector)\n    }\n  }\n\n  elementAttributeChanged(element: Element, _attributeName: string) {\n    const { selector } = this\n\n    if (selector) {\n      const matches = this.matchElement(element)\n      const matchedBefore = this.matchesByElement.has(selector, element)\n\n      if (matches && !matchedBefore) {\n        this.selectorMatched(element, selector)\n      } else if (!matches && matchedBefore) {\n        this.selectorUnmatched(element, selector)\n      }\n    }\n  }\n\n  // Selector management\n\n  private selectorMatched(element: Element, selector: string) {\n    this.delegate.selectorMatched(element, selector, this.details)\n    this.matchesByElement.add(selector, element)\n  }\n\n  private selectorUnmatched(element: Element, selector: string) {\n    this.delegate.selectorUnmatched(element, selector, this.details)\n    this.matchesByElement.delete(selector, element)\n  }\n}\n","export interface StringMapObserverDelegate {\n  getStringMapKeyForAttribute(attributeName: string): string | undefined\n  stringMapKeyAdded?(key: string, attributeName: string): void\n  stringMapValueChanged?(value: string | null, key: string, oldValue: string | null): void\n  stringMapKeyRemoved?(key: string, attributeName: string, oldValue: string | null): void\n}\n\nexport class StringMapObserver {\n  readonly element: Element\n  readonly delegate: StringMapObserverDelegate\n  private started: boolean\n  private stringMap: Map<string, string>\n  private mutationObserver: MutationObserver\n\n  constructor(element: Element, delegate: StringMapObserverDelegate) {\n    this.element = element\n    this.delegate = delegate\n    this.started = false\n    this.stringMap = new Map()\n    this.mutationObserver = new MutationObserver((mutations) => this.processMutations(mutations))\n  }\n\n  start() {\n    if (!this.started) {\n      this.started = true\n      this.mutationObserver.observe(this.element, { attributes: true, attributeOldValue: true })\n      this.refresh()\n    }\n  }\n\n  stop() {\n    if (this.started) {\n      this.mutationObserver.takeRecords()\n      this.mutationObserver.disconnect()\n      this.started = false\n    }\n  }\n\n  refresh() {\n    if (this.started) {\n      for (const attributeName of this.knownAttributeNames) {\n        this.refreshAttribute(attributeName, null)\n      }\n    }\n  }\n\n  // Mutation record processing\n\n  private processMutations(mutations: MutationRecord[]) {\n    if (this.started) {\n      for (const mutation of mutations) {\n        this.processMutation(mutation)\n      }\n    }\n  }\n\n  private processMutation(mutation: MutationRecord) {\n    const attributeName = mutation.attributeName\n    if (attributeName) {\n      this.refreshAttribute(attributeName, mutation.oldValue)\n    }\n  }\n\n  // State tracking\n\n  private refreshAttribute(attributeName: string, oldValue: string | null) {\n    const key = this.delegate.getStringMapKeyForAttribute(attributeName)\n    if (key != null) {\n      if (!this.stringMap.has(attributeName)) {\n        this.stringMapKeyAdded(key, attributeName)\n      }\n\n      const value = this.element.getAttribute(attributeName)\n      if (this.stringMap.get(attributeName) != value) {\n        this.stringMapValueChanged(value, key, oldValue)\n      }\n\n      if (value == null) {\n        const oldValue = this.stringMap.get(attributeName)\n        this.stringMap.delete(attributeName)\n        if (oldValue) this.stringMapKeyRemoved(key, attributeName, oldValue)\n      } else {\n        this.stringMap.set(attributeName, value)\n      }\n    }\n  }\n\n  private stringMapKeyAdded(key: string, attributeName: string) {\n    if (this.delegate.stringMapKeyAdded) {\n      this.delegate.stringMapKeyAdded(key, attributeName)\n    }\n  }\n\n  private stringMapValueChanged(value: string | null, key: string, oldValue: string | null) {\n    if (this.delegate.stringMapValueChanged) {\n      this.delegate.stringMapValueChanged(value, key, oldValue)\n    }\n  }\n\n  private stringMapKeyRemoved(key: string, attributeName: string, oldValue: string | null) {\n    if (this.delegate.stringMapKeyRemoved) {\n      this.delegate.stringMapKeyRemoved(key, attributeName, oldValue)\n    }\n  }\n\n  private get knownAttributeNames() {\n    return Array.from(new Set(this.currentAttributeNames.concat(this.recordedAttributeNames)))\n  }\n\n  private get currentAttributeNames() {\n    return Array.from(this.element.attributes).map((attribute) => attribute.name)\n  }\n\n  private get recordedAttributeNames() {\n    return Array.from(this.stringMap.keys())\n  }\n}\n","import { AttributeObserver, AttributeObserverDelegate } from \"./attribute_observer\"\nimport { Multimap } from \"../multimap\"\n\nexport interface Token {\n  element: Element\n  attributeName: string\n  index: number\n  content: string\n}\n\nexport interface TokenListObserverDelegate {\n  tokenMatched(token: Token): void\n  tokenUnmatched(token: Token): void\n}\n\nexport class TokenListObserver implements AttributeObserverDelegate {\n  private attributeObserver: AttributeObserver\n  private delegate: TokenListObserverDelegate\n  private tokensByElement: Multimap<Element, Token>\n\n  constructor(element: Element, attributeName: string, delegate: TokenListObserverDelegate) {\n    this.attributeObserver = new AttributeObserver(element, attributeName, this)\n    this.delegate = delegate\n    this.tokensByElement = new Multimap()\n  }\n\n  get started(): boolean {\n    return this.attributeObserver.started\n  }\n\n  start() {\n    this.attributeObserver.start()\n  }\n\n  pause(callback: () => void) {\n    this.attributeObserver.pause(callback)\n  }\n\n  stop() {\n    this.attributeObserver.stop()\n  }\n\n  refresh() {\n    this.attributeObserver.refresh()\n  }\n\n  get element(): Element {\n    return this.attributeObserver.element\n  }\n\n  get attributeName(): string {\n    return this.attributeObserver.attributeName\n  }\n\n  // Attribute observer delegate\n\n  elementMatchedAttribute(element: Element) {\n    this.tokensMatched(this.readTokensForElement(element))\n  }\n\n  elementAttributeValueChanged(element: Element) {\n    const [unmatchedTokens, matchedTokens] = this.refreshTokensForElement(element)\n    this.tokensUnmatched(unmatchedTokens)\n    this.tokensMatched(matchedTokens)\n  }\n\n  elementUnmatchedAttribute(element: Element) {\n    this.tokensUnmatched(this.tokensByElement.getValuesForKey(element))\n  }\n\n  private tokensMatched(tokens: Token[]) {\n    tokens.forEach((token) => this.tokenMatched(token))\n  }\n\n  private tokensUnmatched(tokens: Token[]) {\n    tokens.forEach((token) => this.tokenUnmatched(token))\n  }\n\n  private tokenMatched(token: Token) {\n    this.delegate.tokenMatched(token)\n    this.tokensByElement.add(token.element, token)\n  }\n\n  private tokenUnmatched(token: Token) {\n    this.delegate.tokenUnmatched(token)\n    this.tokensByElement.delete(token.element, token)\n  }\n\n  private refreshTokensForElement(element: Element): [Token[], Token[]] {\n    const previousTokens = this.tokensByElement.getValuesForKey(element)\n    const currentTokens = this.readTokensForElement(element)\n    const firstDifferingIndex = zip(previousTokens, currentTokens).findIndex(\n      ([previousToken, currentToken]) => !tokensAreEqual(previousToken, currentToken)\n    )\n\n    if (firstDifferingIndex == -1) {\n      return [[], []]\n    } else {\n      return [previousTokens.slice(firstDifferingIndex), currentTokens.slice(firstDifferingIndex)]\n    }\n  }\n\n  private readTokensForElement(element: Element): Token[] {\n    const attributeName = this.attributeName\n    const tokenString = element.getAttribute(attributeName) || \"\"\n    return parseTokenString(tokenString, element, attributeName)\n  }\n}\n\nfunction parseTokenString(tokenString: string, element: Element, attributeName: string): Token[] {\n  return tokenString\n    .trim()\n    .split(/\\s+/)\n    .filter((content) => content.length)\n    .map((content, index) => ({ element, attributeName, content, index }))\n}\n\nfunction zip<L, R>(left: L[], right: R[]): [L | undefined, R | undefined][] {\n  const length = Math.max(left.length, right.length)\n  return Array.from({ length }, (_, index) => [left[index], right[index]] as [L, R])\n}\n\nfunction tokensAreEqual(left?: Token, right?: Token) {\n  return left && right && left.index == right.index && left.content == right.content\n}\n","import { Token, TokenListObserver, TokenListObserverDelegate } from \"./token_list_observer\"\n\nexport interface ValueListObserverDelegate<T> {\n  parseValueForToken(token: Token): T | undefined\n  elementMatchedValue(element: Element, value: T): void\n  elementUnmatchedValue(element: Element, value: T): void\n}\n\ninterface ParseResult<T> {\n  value?: T\n  error?: Error\n}\n\nexport class ValueListObserver<T> implements TokenListObserverDelegate {\n  private tokenListObserver: TokenListObserver\n  private delegate: ValueListObserverDelegate<T>\n  private parseResultsByToken: WeakMap<Token, ParseResult<T>>\n  private valuesByTokenByElement: WeakMap<Element, Map<Token, T>>\n\n  constructor(element: Element, attributeName: string, delegate: ValueListObserverDelegate<T>) {\n    this.tokenListObserver = new TokenListObserver(element, attributeName, this)\n    this.delegate = delegate\n    this.parseResultsByToken = new WeakMap()\n    this.valuesByTokenByElement = new WeakMap()\n  }\n\n  get started(): boolean {\n    return this.tokenListObserver.started\n  }\n\n  start() {\n    this.tokenListObserver.start()\n  }\n\n  stop() {\n    this.tokenListObserver.stop()\n  }\n\n  refresh() {\n    this.tokenListObserver.refresh()\n  }\n\n  get element(): Element {\n    return this.tokenListObserver.element\n  }\n\n  get attributeName(): string {\n    return this.tokenListObserver.attributeName\n  }\n\n  tokenMatched(token: Token) {\n    const { element } = token\n    const { value } = this.fetchParseResultForToken(token)\n    if (value) {\n      this.fetchValuesByTokenForElement(element).set(token, value)\n      this.delegate.elementMatchedValue(element, value)\n    }\n  }\n\n  tokenUnmatched(token: Token) {\n    const { element } = token\n    const { value } = this.fetchParseResultForToken(token)\n    if (value) {\n      this.fetchValuesByTokenForElement(element).delete(token)\n      this.delegate.elementUnmatchedValue(element, value)\n    }\n  }\n\n  private fetchParseResultForToken(token: Token) {\n    let parseResult = this.parseResultsByToken.get(token)\n    if (!parseResult) {\n      parseResult = this.parseToken(token)\n      this.parseResultsByToken.set(token, parseResult)\n    }\n    return parseResult\n  }\n\n  private fetchValuesByTokenForElement(element: Element) {\n    let valuesByToken = this.valuesByTokenByElement.get(element)\n    if (!valuesByToken) {\n      valuesByToken = new Map()\n      this.valuesByTokenByElement.set(element, valuesByToken)\n    }\n    return valuesByToken\n  }\n\n  private parseToken(token: Token): ParseResult<T> {\n    try {\n      const value = this.delegate.parseValueForToken(token)\n      return { value }\n    } catch (error: any) {\n      return { error }\n    }\n  }\n}\n","import { Action } from \"./action\"\nimport { Binding } from \"./binding\"\nimport { Context } from \"./context\"\nimport { ErrorHandler } from \"./error_handler\"\nimport { Schema } from \"./schema\"\nimport { Token, ValueListObserver, ValueListObserverDelegate } from \"../mutation-observers\"\n\nexport interface BindingObserverDelegate extends ErrorHandler {\n  bindingConnected(binding: Binding): void\n  bindingDisconnected(binding: Binding, clearEventListeners?: boolean): void\n}\n\nexport class BindingObserver implements ValueListObserverDelegate<Action> {\n  readonly context: Context\n  private delegate: BindingObserverDelegate\n  private valueListObserver?: ValueListObserver<Action>\n  private bindingsByAction: Map<Action, Binding>\n\n  constructor(context: Context, delegate: BindingObserverDelegate) {\n    this.context = context\n    this.delegate = delegate\n    this.bindingsByAction = new Map()\n  }\n\n  start() {\n    if (!this.valueListObserver) {\n      this.valueListObserver = new ValueListObserver(this.element, this.actionAttribute, this)\n      this.valueListObserver.start()\n    }\n  }\n\n  stop() {\n    if (this.valueListObserver) {\n      this.valueListObserver.stop()\n      delete this.valueListObserver\n      this.disconnectAllActions()\n    }\n  }\n\n  get element() {\n    return this.context.element\n  }\n\n  get identifier() {\n    return this.context.identifier\n  }\n\n  get actionAttribute() {\n    return this.schema.actionAttribute\n  }\n\n  get schema(): Schema {\n    return this.context.schema\n  }\n\n  get bindings(): Binding[] {\n    return Array.from(this.bindingsByAction.values())\n  }\n\n  private connectAction(action: Action) {\n    const binding = new Binding(this.context, action)\n    this.bindingsByAction.set(action, binding)\n    this.delegate.bindingConnected(binding)\n  }\n\n  private disconnectAction(action: Action) {\n    const binding = this.bindingsByAction.get(action)\n    if (binding) {\n      this.bindingsByAction.delete(action)\n      this.delegate.bindingDisconnected(binding)\n    }\n  }\n\n  private disconnectAllActions() {\n    this.bindings.forEach((binding) => this.delegate.bindingDisconnected(binding, true))\n    this.bindingsByAction.clear()\n  }\n\n  // Value observer delegate\n\n  parseValueForToken(token: Token): Action | undefined {\n    const action = Action.forToken(token, this.schema)\n    if (action.identifier == this.identifier) {\n      return action\n    }\n  }\n\n  elementMatchedValue(element: Element, action: Action) {\n    this.connectAction(action)\n  }\n\n  elementUnmatchedValue(element: Element, action: Action) {\n    this.disconnectAction(action)\n  }\n}\n","import { Context } from \"./context\"\nimport { StringMapObserver, StringMapObserverDelegate } from \"../mutation-observers\"\nimport { ValueDescriptor } from \"./value_properties\"\nimport { capitalize } from \"./string_helpers\"\n\nexport class ValueObserver implements StringMapObserverDelegate {\n  readonly context: Context\n  readonly receiver: any\n  private stringMapObserver: StringMapObserver\n  private valueDescriptorMap: { [attributeName: string]: ValueDescriptor }\n\n  constructor(context: Context, receiver: any) {\n    this.context = context\n    this.receiver = receiver\n    this.stringMapObserver = new StringMapObserver(this.element, this)\n    this.valueDescriptorMap = (this.controller as any).valueDescriptorMap\n  }\n\n  start() {\n    this.stringMapObserver.start()\n    this.invokeChangedCallbacksForDefaultValues()\n  }\n\n  stop() {\n    this.stringMapObserver.stop()\n  }\n\n  get element() {\n    return this.context.element\n  }\n\n  get controller() {\n    return this.context.controller\n  }\n\n  // String map observer delegate\n\n  getStringMapKeyForAttribute(attributeName: string) {\n    if (attributeName in this.valueDescriptorMap) {\n      return this.valueDescriptorMap[attributeName].name\n    }\n  }\n\n  stringMapKeyAdded(key: string, attributeName: string) {\n    const descriptor = this.valueDescriptorMap[attributeName]\n\n    if (!this.hasValue(key)) {\n      this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), descriptor.writer(descriptor.defaultValue))\n    }\n  }\n\n  stringMapValueChanged(value: string, name: string, oldValue: string) {\n    const descriptor = this.valueDescriptorNameMap[name]\n\n    if (value === null) return\n\n    if (oldValue === null) {\n      oldValue = descriptor.writer(descriptor.defaultValue)\n    }\n\n    this.invokeChangedCallback(name, value, oldValue)\n  }\n\n  stringMapKeyRemoved(key: string, attributeName: string, oldValue: string) {\n    const descriptor = this.valueDescriptorNameMap[key]\n\n    if (this.hasValue(key)) {\n      this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), oldValue)\n    } else {\n      this.invokeChangedCallback(key, descriptor.writer(descriptor.defaultValue), oldValue)\n    }\n  }\n\n  private invokeChangedCallbacksForDefaultValues() {\n    for (const { key, name, defaultValue, writer } of this.valueDescriptors) {\n      if (defaultValue != undefined && !this.controller.data.has(key)) {\n        this.invokeChangedCallback(name, writer(defaultValue), undefined)\n      }\n    }\n  }\n\n  private invokeChangedCallback(name: string, rawValue: string, rawOldValue: string | undefined) {\n    const changedMethodName = `${name}Changed`\n    const changedMethod = this.receiver[changedMethodName]\n\n    if (typeof changedMethod == \"function\") {\n      const descriptor = this.valueDescriptorNameMap[name]\n\n      try {\n        const value = descriptor.reader(rawValue)\n        let oldValue = rawOldValue\n\n        if (rawOldValue) {\n          oldValue = descriptor.reader(rawOldValue)\n        }\n\n        changedMethod.call(this.receiver, value, oldValue)\n      } catch (error) {\n        if (error instanceof TypeError) {\n          error.message = `Stimulus Value \"${this.context.identifier}.${descriptor.name}\" - ${error.message}`\n        }\n\n        throw error\n      }\n    }\n  }\n\n  private get valueDescriptors() {\n    const { valueDescriptorMap } = this\n    return Object.keys(valueDescriptorMap).map((key) => valueDescriptorMap[key])\n  }\n\n  private get valueDescriptorNameMap() {\n    const descriptors: { [type: string]: ValueDescriptor } = {}\n\n    Object.keys(this.valueDescriptorMap).forEach((key) => {\n      const descriptor = this.valueDescriptorMap[key]\n      descriptors[descriptor.name] = descriptor\n    })\n\n    return descriptors\n  }\n\n  private hasValue(attributeName: string) {\n    const descriptor = this.valueDescriptorNameMap[attributeName]\n    const hasMethodName = `has${capitalize(descriptor.name)}`\n\n    return this.receiver[hasMethodName]\n  }\n}\n","import { Multimap } from \"../multimap\"\nimport { Token, TokenListObserver, TokenListObserverDelegate } from \"../mutation-observers\"\nimport { Context } from \"./context\"\n\nexport interface TargetObserverDelegate {\n  targetConnected(element: Element, name: string): void\n  targetDisconnected(element: Element, name: string): void\n}\n\nexport class TargetObserver implements TokenListObserverDelegate {\n  readonly context: Context\n  readonly delegate: TargetObserverDelegate\n  readonly targetsByName: Multimap<string, Element>\n  private tokenListObserver?: TokenListObserver\n\n  constructor(context: Context, delegate: TargetObserverDelegate) {\n    this.context = context\n    this.delegate = delegate\n    this.targetsByName = new Multimap()\n  }\n\n  start() {\n    if (!this.tokenListObserver) {\n      this.tokenListObserver = new TokenListObserver(this.element, this.attributeName, this)\n      this.tokenListObserver.start()\n    }\n  }\n\n  stop() {\n    if (this.tokenListObserver) {\n      this.disconnectAllTargets()\n      this.tokenListObserver.stop()\n      delete this.tokenListObserver\n    }\n  }\n\n  // Token list observer delegate\n\n  tokenMatched({ element, content: name }: Token) {\n    if (this.scope.containsElement(element)) {\n      this.connectTarget(element, name)\n    }\n  }\n\n  tokenUnmatched({ element, content: name }: Token) {\n    this.disconnectTarget(element, name)\n  }\n\n  // Target management\n\n  connectTarget(element: Element, name: string) {\n    if (!this.targetsByName.has(name, element)) {\n      this.targetsByName.add(name, element)\n      this.tokenListObserver?.pause(() => this.delegate.targetConnected(element, name))\n    }\n  }\n\n  disconnectTarget(element: Element, name: string) {\n    if (this.targetsByName.has(name, element)) {\n      this.targetsByName.delete(name, element)\n      this.tokenListObserver?.pause(() => this.delegate.targetDisconnected(element, name))\n    }\n  }\n\n  disconnectAllTargets() {\n    for (const name of this.targetsByName.keys) {\n      for (const element of this.targetsByName.getValuesForKey(name)) {\n        this.disconnectTarget(element, name)\n      }\n    }\n  }\n\n  // Private\n\n  private get attributeName() {\n    return `data-${this.context.identifier}-target`\n  }\n\n  private get element() {\n    return this.context.element\n  }\n\n  private get scope() {\n    return this.context.scope\n  }\n}\n","import { Constructor } from \"./constructor\"\n\nexport function readInheritableStaticArrayValues<T, U = string>(constructor: Constructor<T>, propertyName: string) {\n  const ancestors = getAncestorsForConstructor(constructor)\n  return Array.from(\n    ancestors.reduce((values, constructor) => {\n      getOwnStaticArrayValues(constructor, propertyName).forEach((name) => values.add(name))\n      return values\n    }, new Set() as Set<U>)\n  )\n}\n\nexport function readInheritableStaticObjectPairs<T, U>(constructor: Constructor<T>, propertyName: string) {\n  const ancestors = getAncestorsForConstructor(constructor)\n  return ancestors.reduce((pairs, constructor) => {\n    pairs.push(...(getOwnStaticObjectPairs(constructor, propertyName) as any))\n    return pairs\n  }, [] as [string, U][])\n}\n\nfunction getAncestorsForConstructor<T>(constructor: Constructor<T>) {\n  const ancestors: Constructor<any>[] = []\n  while (constructor) {\n    ancestors.push(constructor)\n    constructor = Object.getPrototypeOf(constructor)\n  }\n  return ancestors.reverse()\n}\n\nfunction getOwnStaticArrayValues<T>(constructor: Constructor<T>, propertyName: string) {\n  const definition = (constructor as any)[propertyName]\n  return Array.isArray(definition) ? definition : []\n}\n\nfunction getOwnStaticObjectPairs<T, U>(constructor: Constructor<T>, propertyName: string) {\n  const definition = (constructor as any)[propertyName]\n  return definition ? Object.keys(definition).map((key) => [key, definition[key]] as [string, U]) : []\n}\n","import { Multimap } from \"../multimap\"\nimport { AttributeObserver, AttributeObserverDelegate } from \"../mutation-observers\"\nimport { SelectorObserver, SelectorObserverDelegate } from \"../mutation-observers\"\nimport { Context } from \"./context\"\nimport { Controller } from \"./controller\"\n\nimport { readInheritableStaticArrayValues } from \"./inheritable_statics\"\n\ntype OutletObserverDetails = { outletName: string }\n\nexport interface OutletObserverDelegate {\n  outletConnected(outlet: Controller, element: Element, outletName: string): void\n  outletDisconnected(outlet: Controller, element: Element, outletName: string): void\n}\n\nexport class OutletObserver implements AttributeObserverDelegate, SelectorObserverDelegate {\n  started: boolean\n  readonly context: Context\n  readonly delegate: OutletObserverDelegate\n  readonly outletsByName: Multimap<string, Controller>\n  readonly outletElementsByName: Multimap<string, Element>\n  private selectorObserverMap: Map<string, SelectorObserver>\n  private attributeObserverMap: Map<string, AttributeObserver>\n\n  constructor(context: Context, delegate: OutletObserverDelegate) {\n    this.started = false\n    this.context = context\n    this.delegate = delegate\n    this.outletsByName = new Multimap()\n    this.outletElementsByName = new Multimap()\n    this.selectorObserverMap = new Map()\n    this.attributeObserverMap = new Map()\n  }\n\n  start() {\n    if (!this.started) {\n      this.outletDefinitions.forEach((outletName) => {\n        this.setupSelectorObserverForOutlet(outletName)\n        this.setupAttributeObserverForOutlet(outletName)\n      })\n      this.started = true\n      this.dependentContexts.forEach((context) => context.refresh())\n    }\n  }\n\n  refresh() {\n    this.selectorObserverMap.forEach((observer) => observer.refresh())\n    this.attributeObserverMap.forEach((observer) => observer.refresh())\n  }\n\n  stop() {\n    if (this.started) {\n      this.started = false\n      this.disconnectAllOutlets()\n      this.stopSelectorObservers()\n      this.stopAttributeObservers()\n    }\n  }\n\n  stopSelectorObservers() {\n    if (this.selectorObserverMap.size > 0) {\n      this.selectorObserverMap.forEach((observer) => observer.stop())\n      this.selectorObserverMap.clear()\n    }\n  }\n\n  stopAttributeObservers() {\n    if (this.attributeObserverMap.size > 0) {\n      this.attributeObserverMap.forEach((observer) => observer.stop())\n      this.attributeObserverMap.clear()\n    }\n  }\n\n  // Selector observer delegate\n\n  selectorMatched(element: Element, _selector: string, { outletName }: OutletObserverDetails) {\n    const outlet = this.getOutlet(element, outletName)\n\n    if (outlet) {\n      this.connectOutlet(outlet, element, outletName)\n    }\n  }\n\n  selectorUnmatched(element: Element, _selector: string, { outletName }: OutletObserverDetails) {\n    const outlet = this.getOutletFromMap(element, outletName)\n\n    if (outlet) {\n      this.disconnectOutlet(outlet, element, outletName)\n    }\n  }\n\n  selectorMatchElement(element: Element, { outletName }: OutletObserverDetails) {\n    const selector = this.selector(outletName)\n    const hasOutlet = this.hasOutlet(element, outletName)\n    const hasOutletController = element.matches(`[${this.schema.controllerAttribute}~=${outletName}]`)\n\n    if (selector) {\n      return hasOutlet && hasOutletController && element.matches(selector)\n    } else {\n      return false\n    }\n  }\n\n  // Attribute observer delegate\n\n  elementMatchedAttribute(_element: Element, attributeName: string) {\n    const outletName = this.getOutletNameFromOutletAttributeName(attributeName)\n\n    if (outletName) {\n      this.updateSelectorObserverForOutlet(outletName)\n    }\n  }\n\n  elementAttributeValueChanged(_element: Element, attributeName: string) {\n    const outletName = this.getOutletNameFromOutletAttributeName(attributeName)\n\n    if (outletName) {\n      this.updateSelectorObserverForOutlet(outletName)\n    }\n  }\n\n  elementUnmatchedAttribute(_element: Element, attributeName: string) {\n    const outletName = this.getOutletNameFromOutletAttributeName(attributeName)\n\n    if (outletName) {\n      this.updateSelectorObserverForOutlet(outletName)\n    }\n  }\n\n  // Outlet management\n\n  connectOutlet(outlet: Controller, element: Element, outletName: string) {\n    if (!this.outletElementsByName.has(outletName, element)) {\n      this.outletsByName.add(outletName, outlet)\n      this.outletElementsByName.add(outletName, element)\n      this.selectorObserverMap.get(outletName)?.pause(() => this.delegate.outletConnected(outlet, element, outletName))\n    }\n  }\n\n  disconnectOutlet(outlet: Controller, element: Element, outletName: string) {\n    if (this.outletElementsByName.has(outletName, element)) {\n      this.outletsByName.delete(outletName, outlet)\n      this.outletElementsByName.delete(outletName, element)\n      this.selectorObserverMap\n        .get(outletName)\n        ?.pause(() => this.delegate.outletDisconnected(outlet, element, outletName))\n    }\n  }\n\n  disconnectAllOutlets() {\n    for (const outletName of this.outletElementsByName.keys) {\n      for (const element of this.outletElementsByName.getValuesForKey(outletName)) {\n        for (const outlet of this.outletsByName.getValuesForKey(outletName)) {\n          this.disconnectOutlet(outlet, element, outletName)\n        }\n      }\n    }\n  }\n\n  // Observer management\n\n  private updateSelectorObserverForOutlet(outletName: string) {\n    const observer = this.selectorObserverMap.get(outletName)\n\n    if (observer) {\n      observer.selector = this.selector(outletName)\n    }\n  }\n\n  private setupSelectorObserverForOutlet(outletName: string) {\n    const selector = this.selector(outletName)\n    const selectorObserver = new SelectorObserver(document.body, selector!, this, { outletName })\n\n    this.selectorObserverMap.set(outletName, selectorObserver)\n\n    selectorObserver.start()\n  }\n\n  private setupAttributeObserverForOutlet(outletName: string) {\n    const attributeName = this.attributeNameForOutletName(outletName)\n    const attributeObserver = new AttributeObserver(this.scope.element, attributeName, this)\n\n    this.attributeObserverMap.set(outletName, attributeObserver)\n\n    attributeObserver.start()\n  }\n\n  // Private\n\n  private selector(outletName: string) {\n    return this.scope.outlets.getSelectorForOutletName(outletName)\n  }\n\n  private attributeNameForOutletName(outletName: string) {\n    return this.scope.schema.outletAttributeForScope(this.identifier, outletName)\n  }\n\n  private getOutletNameFromOutletAttributeName(attributeName: string) {\n    return this.outletDefinitions.find((outletName) => this.attributeNameForOutletName(outletName) === attributeName)\n  }\n\n  private get outletDependencies() {\n    const dependencies = new Multimap<string, string>()\n\n    this.router.modules.forEach((module) => {\n      const constructor = module.definition.controllerConstructor\n      const outlets = readInheritableStaticArrayValues(constructor, \"outlets\")\n\n      outlets.forEach((outlet) => dependencies.add(outlet, module.identifier))\n    })\n\n    return dependencies\n  }\n\n  private get outletDefinitions() {\n    return this.outletDependencies.getKeysForValue(this.identifier)\n  }\n\n  private get dependentControllerIdentifiers() {\n    return this.outletDependencies.getValuesForKey(this.identifier)\n  }\n\n  private get dependentContexts() {\n    const identifiers = this.dependentControllerIdentifiers\n    return this.router.contexts.filter((context) => identifiers.includes(context.identifier))\n  }\n\n  private hasOutlet(element: Element, outletName: string) {\n    return !!this.getOutlet(element, outletName) || !!this.getOutletFromMap(element, outletName)\n  }\n\n  private getOutlet(element: Element, outletName: string) {\n    return this.application.getControllerForElementAndIdentifier(element, outletName)\n  }\n\n  private getOutletFromMap(element: Element, outletName: string) {\n    return this.outletsByName.getValuesForKey(outletName).find((outlet) => outlet.element === element)\n  }\n\n  private get scope() {\n    return this.context.scope\n  }\n\n  private get schema() {\n    return this.context.schema\n  }\n\n  private get identifier() {\n    return this.context.identifier\n  }\n\n  private get application() {\n    return this.context.application\n  }\n\n  private get router() {\n    return this.application.router\n  }\n}\n","import { Application } from \"./application\"\nimport { BindingObserver } from \"./binding_observer\"\nimport { Controller } from \"./controller\"\nimport { Dispatcher } from \"./dispatcher\"\nimport { ErrorHandler } from \"./error_handler\"\nimport { Module } from \"./module\"\nimport { Schema } from \"./schema\"\nimport { Scope } from \"./scope\"\nimport { ValueObserver } from \"./value_observer\"\nimport { TargetObserver, TargetObserverDelegate } from \"./target_observer\"\nimport { OutletObserver, OutletObserverDelegate } from \"./outlet_observer\"\nimport { namespaceCamelize } from \"./string_helpers\"\n\nexport class Context implements ErrorHandler, TargetObserverDelegate, OutletObserverDelegate {\n  readonly module: Module\n  readonly scope: Scope\n  readonly controller: Controller\n  private bindingObserver: BindingObserver\n  private valueObserver: ValueObserver\n  private targetObserver: TargetObserver\n  private outletObserver: OutletObserver\n\n  constructor(module: Module, scope: Scope) {\n    this.module = module\n    this.scope = scope\n    this.controller = new module.controllerConstructor(this)\n    this.bindingObserver = new BindingObserver(this, this.dispatcher)\n    this.valueObserver = new ValueObserver(this, this.controller)\n    this.targetObserver = new TargetObserver(this, this)\n    this.outletObserver = new OutletObserver(this, this)\n\n    try {\n      this.controller.initialize()\n      this.logDebugActivity(\"initialize\")\n    } catch (error: any) {\n      this.handleError(error, \"initializing controller\")\n    }\n  }\n\n  connect() {\n    this.bindingObserver.start()\n    this.valueObserver.start()\n    this.targetObserver.start()\n    this.outletObserver.start()\n\n    try {\n      this.controller.connect()\n      this.logDebugActivity(\"connect\")\n    } catch (error: any) {\n      this.handleError(error, \"connecting controller\")\n    }\n  }\n\n  refresh() {\n    this.outletObserver.refresh()\n  }\n\n  disconnect() {\n    try {\n      this.controller.disconnect()\n      this.logDebugActivity(\"disconnect\")\n    } catch (error: any) {\n      this.handleError(error, \"disconnecting controller\")\n    }\n\n    this.outletObserver.stop()\n    this.targetObserver.stop()\n    this.valueObserver.stop()\n    this.bindingObserver.stop()\n  }\n\n  get application(): Application {\n    return this.module.application\n  }\n\n  get identifier(): string {\n    return this.module.identifier\n  }\n\n  get schema(): Schema {\n    return this.application.schema\n  }\n\n  get dispatcher(): Dispatcher {\n    return this.application.dispatcher\n  }\n\n  get element(): Element {\n    return this.scope.element\n  }\n\n  get parentElement(): Element | null {\n    return this.element.parentElement\n  }\n\n  // Error handling\n\n  handleError(error: Error, message: string, detail: object = {}) {\n    const { identifier, controller, element } = this\n    detail = Object.assign({ identifier, controller, element }, detail)\n    this.application.handleError(error, `Error ${message}`, detail)\n  }\n\n  // Debug logging\n\n  logDebugActivity = (functionName: string, detail: object = {}): void => {\n    const { identifier, controller, element } = this\n    detail = Object.assign({ identifier, controller, element }, detail)\n    this.application.logDebugActivity(this.identifier, functionName, detail)\n  }\n\n  // Target observer delegate\n\n  targetConnected(element: Element, name: string) {\n    this.invokeControllerMethod(`${name}TargetConnected`, element)\n  }\n\n  targetDisconnected(element: Element, name: string) {\n    this.invokeControllerMethod(`${name}TargetDisconnected`, element)\n  }\n\n  // Outlet observer delegate\n\n  outletConnected(outlet: Controller, element: Element, name: string) {\n    this.invokeControllerMethod(`${namespaceCamelize(name)}OutletConnected`, outlet, element)\n  }\n\n  outletDisconnected(outlet: Controller, element: Element, name: string) {\n    this.invokeControllerMethod(`${namespaceCamelize(name)}OutletDisconnected`, outlet, element)\n  }\n\n  // Private\n\n  invokeControllerMethod(methodName: string, ...args: any[]) {\n    const controller: any = this.controller\n    if (typeof controller[methodName] == \"function\") {\n      controller[methodName](...args)\n    }\n  }\n}\n","import { Constructor } from \"./constructor\"\nimport { readInheritableStaticArrayValues } from \"./inheritable_statics\"\n\nexport type Blessing<T> = (constructor: Constructor<T>) => PropertyDescriptorMap\n\nexport interface Blessable<T> extends Constructor<T> {\n  readonly blessings?: Blessing<T>[]\n}\n\nexport function bless<T>(constructor: Blessable<T>): Constructor<T> {\n  return shadow(constructor, getBlessedProperties(constructor))\n}\n\nfunction shadow<T>(constructor: Constructor<T>, properties: PropertyDescriptorMap) {\n  const shadowConstructor = extend(constructor)\n  const shadowProperties = getShadowProperties(constructor.prototype, properties)\n  Object.defineProperties(shadowConstructor.prototype, shadowProperties)\n  return shadowConstructor\n}\n\nfunction getBlessedProperties<T>(constructor: Constructor<T>) {\n  const blessings = readInheritableStaticArrayValues(constructor, \"blessings\") as Blessing<T>[]\n  return blessings.reduce((blessedProperties, blessing) => {\n    const properties = blessing(constructor)\n    for (const key in properties) {\n      const descriptor = blessedProperties[key] || ({} as PropertyDescriptor)\n      blessedProperties[key] = Object.assign(descriptor, properties[key])\n    }\n    return blessedProperties\n  }, {} as PropertyDescriptorMap)\n}\n\nfunction getShadowProperties(prototype: any, properties: PropertyDescriptorMap) {\n  return getOwnKeys(properties).reduce((shadowProperties, key) => {\n    const descriptor = getShadowedDescriptor(prototype, properties, key)\n    if (descriptor) {\n      Object.assign(shadowProperties, { [key]: descriptor })\n    }\n    return shadowProperties\n  }, {} as PropertyDescriptorMap)\n}\n\nfunction getShadowedDescriptor(prototype: any, properties: PropertyDescriptorMap, key: string | symbol) {\n  const shadowingDescriptor = Object.getOwnPropertyDescriptor(prototype, key)\n  const shadowedByValue = shadowingDescriptor && \"value\" in shadowingDescriptor\n  if (!shadowedByValue) {\n    const descriptor = Object.getOwnPropertyDescriptor(properties, key)!.value\n    if (shadowingDescriptor) {\n      descriptor.get = shadowingDescriptor.get || descriptor.get\n      descriptor.set = shadowingDescriptor.set || descriptor.set\n    }\n    return descriptor\n  }\n}\n\nconst getOwnKeys = (() => {\n  if (typeof Object.getOwnPropertySymbols == \"function\") {\n    return (object: any) => [...Object.getOwnPropertyNames(object), ...Object.getOwnPropertySymbols(object)]\n  } else {\n    return Object.getOwnPropertyNames\n  }\n})()\n\nconst extend = (() => {\n  function extendWithReflect<T extends Constructor<any>>(constructor: T): T {\n    function extended() {\n      return Reflect.construct(constructor, arguments, new.target)\n    }\n\n    extended.prototype = Object.create(constructor.prototype, {\n      constructor: { value: extended },\n    })\n\n    Reflect.setPrototypeOf(extended, constructor)\n    return extended as any\n  }\n\n  function testReflectExtension() {\n    const a = function (this: any) {\n      this.a.call(this)\n    } as any\n    const b = extendWithReflect(a)\n    b.prototype.a = function () {}\n    return new b()\n  }\n\n  try {\n    testReflectExtension()\n    return extendWithReflect\n  } catch (error: any) {\n    return <T extends Constructor<any>>(constructor: T) => class extended extends constructor {}\n  }\n})()\n","import { Application } from \"./application\"\nimport { Context } from \"./context\"\nimport { ControllerConstructor } from \"./controller\"\nimport { Definition, blessDefinition } from \"./definition\"\nimport { Scope } from \"./scope\"\n\nexport class Module {\n  readonly application: Application\n  readonly definition: Definition\n  private contextsByScope: WeakMap<Scope, Context>\n  private connectedContexts: Set<Context>\n\n  constructor(application: Application, definition: Definition) {\n    this.application = application\n    this.definition = blessDefinition(definition)\n    this.contextsByScope = new WeakMap()\n    this.connectedContexts = new Set()\n  }\n\n  get identifier(): string {\n    return this.definition.identifier\n  }\n\n  get controllerConstructor(): ControllerConstructor {\n    return this.definition.controllerConstructor\n  }\n\n  get contexts(): Context[] {\n    return Array.from(this.connectedContexts)\n  }\n\n  connectContextForScope(scope: Scope) {\n    const context = this.fetchContextForScope(scope)\n    this.connectedContexts.add(context)\n    context.connect()\n  }\n\n  disconnectContextForScope(scope: Scope) {\n    const context = this.contextsByScope.get(scope)\n    if (context) {\n      this.connectedContexts.delete(context)\n      context.disconnect()\n    }\n  }\n\n  private fetchContextForScope(scope: Scope): Context {\n    let context = this.contextsByScope.get(scope)\n    if (!context) {\n      context = new Context(this, scope)\n      this.contextsByScope.set(scope, context)\n    }\n    return context\n  }\n}\n","import { bless } from \"./blessing\"\nimport { ControllerConstructor } from \"./controller\"\n\nexport interface Definition {\n  identifier: string\n  controllerConstructor: ControllerConstructor\n}\n\nexport function blessDefinition(definition: Definition): Definition {\n  return {\n    identifier: definition.identifier,\n    controllerConstructor: bless(definition.controllerConstructor),\n  }\n}\n","import { Scope } from \"./scope\"\nimport { tokenize } from \"./string_helpers\"\n\nexport class ClassMap {\n  readonly scope: Scope\n\n  constructor(scope: Scope) {\n    this.scope = scope\n  }\n\n  has(name: string) {\n    return this.data.has(this.getDataKey(name))\n  }\n\n  get(name: string): string | undefined {\n    return this.getAll(name)[0]\n  }\n\n  getAll(name: string) {\n    const tokenString = this.data.get(this.getDataKey(name)) || \"\"\n    return tokenize(tokenString)\n  }\n\n  getAttributeName(name: string) {\n    return this.data.getAttributeNameForKey(this.getDataKey(name))\n  }\n\n  getDataKey(name: string) {\n    return `${name}-class`\n  }\n\n  get data() {\n    return this.scope.data\n  }\n}\n","import { Scope } from \"./scope\"\nimport { dasherize } from \"./string_helpers\"\n\nexport class DataMap {\n  readonly scope: Scope\n\n  constructor(scope: Scope) {\n    this.scope = scope\n  }\n\n  get element(): Element {\n    return this.scope.element\n  }\n\n  get identifier(): string {\n    return this.scope.identifier\n  }\n\n  get(key: string): string | null {\n    const name = this.getAttributeNameForKey(key)\n    return this.element.getAttribute(name)\n  }\n\n  set(key: string, value: string): string | null {\n    const name = this.getAttributeNameForKey(key)\n    this.element.setAttribute(name, value)\n    return this.get(key)\n  }\n\n  has(key: string): boolean {\n    const name = this.getAttributeNameForKey(key)\n    return this.element.hasAttribute(name)\n  }\n\n  delete(key: string): boolean {\n    if (this.has(key)) {\n      const name = this.getAttributeNameForKey(key)\n      this.element.removeAttribute(name)\n      return true\n    } else {\n      return false\n    }\n  }\n\n  getAttributeNameForKey(key: string): string {\n    return `data-${this.identifier}-${dasherize(key)}`\n  }\n}\n","import { Logger } from \"./logger\"\n\nexport class Guide {\n  readonly logger: Logger\n  readonly warnedKeysByObject: WeakMap<any, Set<string>> = new WeakMap()\n\n  constructor(logger: Logger) {\n    this.logger = logger\n  }\n\n  warn(object: any, key: string, message: string) {\n    let warnedKeys: Set<string> | undefined = this.warnedKeysByObject.get(object)\n\n    if (!warnedKeys) {\n      warnedKeys = new Set()\n      this.warnedKeysByObject.set(object, warnedKeys)\n    }\n\n    if (!warnedKeys.has(key)) {\n      warnedKeys.add(key)\n      this.logger.warn(message, object)\n    }\n  }\n}\n","export function attributeValueContainsToken(attributeName: string, token: string) {\n  return `[${attributeName}~=\"${token}\"]`\n}\n","import { Scope } from \"./scope\"\nimport { attributeValueContainsToken } from \"./selectors\"\n\nexport class TargetSet {\n  readonly scope: Scope\n\n  constructor(scope: Scope) {\n    this.scope = scope\n  }\n\n  get element() {\n    return this.scope.element\n  }\n\n  get identifier() {\n    return this.scope.identifier\n  }\n\n  get schema() {\n    return this.scope.schema\n  }\n\n  has(targetName: string) {\n    return this.find(targetName) != null\n  }\n\n  find(...targetNames: string[]) {\n    return targetNames.reduce(\n      (target, targetName) => target || this.findTarget(targetName) || this.findLegacyTarget(targetName),\n      undefined as Element | undefined\n    )\n  }\n\n  findAll(...targetNames: string[]) {\n    return targetNames.reduce(\n      (targets, targetName) => [\n        ...targets,\n        ...this.findAllTargets(targetName),\n        ...this.findAllLegacyTargets(targetName),\n      ],\n      [] as Element[]\n    )\n  }\n\n  private findTarget(targetName: string) {\n    const selector = this.getSelectorForTargetName(targetName)\n    return this.scope.findElement(selector)\n  }\n\n  private findAllTargets(targetName: string) {\n    const selector = this.getSelectorForTargetName(targetName)\n    return this.scope.findAllElements(selector)\n  }\n\n  private getSelectorForTargetName(targetName: string) {\n    const attributeName = this.schema.targetAttributeForScope(this.identifier)\n    return attributeValueContainsToken(attributeName, targetName)\n  }\n\n  private findLegacyTarget(targetName: string) {\n    const selector = this.getLegacySelectorForTargetName(targetName)\n    return this.deprecate(this.scope.findElement(selector), targetName)\n  }\n\n  private findAllLegacyTargets(targetName: string) {\n    const selector = this.getLegacySelectorForTargetName(targetName)\n    return this.scope.findAllElements(selector).map((element) => this.deprecate(element, targetName))\n  }\n\n  private getLegacySelectorForTargetName(targetName: string) {\n    const targetDescriptor = `${this.identifier}.${targetName}`\n    return attributeValueContainsToken(this.schema.targetAttribute, targetDescriptor)\n  }\n\n  private deprecate<T>(element: T, targetName: string) {\n    if (element) {\n      const { identifier } = this\n      const attributeName = this.schema.targetAttribute\n      const revisedAttributeName = this.schema.targetAttributeForScope(identifier)\n      this.guide.warn(\n        element,\n        `target:${targetName}`,\n        `Please replace ${attributeName}=\"${identifier}.${targetName}\" with ${revisedAttributeName}=\"${targetName}\". ` +\n          `The ${attributeName} attribute is deprecated and will be removed in a future version of Stimulus.`\n      )\n    }\n    return element\n  }\n\n  private get guide() {\n    return this.scope.guide\n  }\n}\n","import { Scope } from \"./scope\"\n\nexport class OutletSet {\n  readonly scope: Scope\n  readonly controllerElement: Element\n\n  constructor(scope: Scope, controllerElement: Element) {\n    this.scope = scope\n    this.controllerElement = controllerElement\n  }\n\n  get element() {\n    return this.scope.element\n  }\n\n  get identifier() {\n    return this.scope.identifier\n  }\n\n  get schema() {\n    return this.scope.schema\n  }\n\n  has(outletName: string) {\n    return this.find(outletName) != null\n  }\n\n  find(...outletNames: string[]) {\n    return outletNames.reduce(\n      (outlet, outletName) => outlet || this.findOutlet(outletName),\n      undefined as Element | undefined\n    )\n  }\n\n  findAll(...outletNames: string[]) {\n    return outletNames.reduce(\n      (outlets, outletName) => [...outlets, ...this.findAllOutlets(outletName)],\n      [] as Element[]\n    )\n  }\n\n  getSelectorForOutletName(outletName: string) {\n    const attributeName = this.schema.outletAttributeForScope(this.identifier, outletName)\n    return this.controllerElement.getAttribute(attributeName)\n  }\n\n  private findOutlet(outletName: string) {\n    const selector = this.getSelectorForOutletName(outletName)\n    if (selector) return this.findElement(selector, outletName)\n  }\n\n  private findAllOutlets(outletName: string) {\n    const selector = this.getSelectorForOutletName(outletName)\n    return selector ? this.findAllElements(selector, outletName) : []\n  }\n\n  private findElement(selector: string, outletName: string): Element | undefined {\n    const elements = this.scope.queryElements(selector)\n    return elements.filter((element) => this.matchesElement(element, selector, outletName))[0]\n  }\n\n  private findAllElements(selector: string, outletName: string): Element[] {\n    const elements = this.scope.queryElements(selector)\n    return elements.filter((element) => this.matchesElement(element, selector, outletName))\n  }\n\n  private matchesElement(element: Element, selector: string, outletName: string): boolean {\n    const controllerAttribute = element.getAttribute(this.scope.schema.controllerAttribute) || \"\"\n    return element.matches(selector) && controllerAttribute.split(\" \").includes(outletName)\n  }\n}\n","import { ClassMap } from \"./class_map\"\nimport { DataMap } from \"./data_map\"\nimport { Guide } from \"./guide\"\nimport { Logger } from \"./logger\"\nimport { Schema } from \"./schema\"\nimport { attributeValueContainsToken } from \"./selectors\"\nimport { TargetSet } from \"./target_set\"\nimport { OutletSet } from \"./outlet_set\"\n\nexport class Scope {\n  readonly schema: Schema\n  readonly element: Element\n  readonly identifier: string\n  readonly guide: Guide\n  readonly outlets: OutletSet\n  readonly targets = new TargetSet(this)\n  readonly classes = new ClassMap(this)\n  readonly data = new DataMap(this)\n\n  constructor(schema: Schema, element: Element, identifier: string, logger: Logger) {\n    this.schema = schema\n    this.element = element\n    this.identifier = identifier\n    this.guide = new Guide(logger)\n    this.outlets = new OutletSet(this.documentScope, element)\n  }\n\n  findElement(selector: string): Element | undefined {\n    return this.element.matches(selector) ? this.element : this.queryElements(selector).find(this.containsElement)\n  }\n\n  findAllElements(selector: string): Element[] {\n    return [\n      ...(this.element.matches(selector) ? [this.element] : []),\n      ...this.queryElements(selector).filter(this.containsElement),\n    ]\n  }\n\n  containsElement = (element: Element): boolean => {\n    return element.closest(this.controllerSelector) === this.element\n  }\n\n  queryElements(selector: string): Element[] {\n    return Array.from(this.element.querySelectorAll(selector))\n  }\n\n  private get controllerSelector(): string {\n    return attributeValueContainsToken(this.schema.controllerAttribute, this.identifier)\n  }\n\n  private get isDocumentScope() {\n    return this.element === document.documentElement\n  }\n\n  private get documentScope(): Scope {\n    return this.isDocumentScope\n      ? this\n      : new Scope(this.schema, document.documentElement, this.identifier, this.guide.logger)\n  }\n}\n","import { ErrorHandler } from \"./error_handler\"\nimport { Schema } from \"./schema\"\nimport { Scope } from \"./scope\"\nimport { Token, ValueListObserver, ValueListObserverDelegate } from \"../mutation-observers\"\n\nexport interface ScopeObserverDelegate extends ErrorHandler {\n  createScopeForElementAndIdentifier(element: Element, identifier: string): Scope\n  scopeConnected(scope: Scope): void\n  scopeDisconnected(scope: Scope): void\n}\n\nexport class ScopeObserver implements ValueListObserverDelegate<Scope> {\n  readonly element: Element\n  readonly schema: Schema\n  private delegate: ScopeObserverDelegate\n  private valueListObserver: ValueListObserver<Scope>\n  private scopesByIdentifierByElement: WeakMap<Element, Map<string, Scope>>\n  private scopeReferenceCounts: WeakMap<Scope, number>\n\n  constructor(element: Element, schema: Schema, delegate: ScopeObserverDelegate) {\n    this.element = element\n    this.schema = schema\n    this.delegate = delegate\n    this.valueListObserver = new ValueListObserver(this.element, this.controllerAttribute, this)\n    this.scopesByIdentifierByElement = new WeakMap()\n    this.scopeReferenceCounts = new WeakMap()\n  }\n\n  start() {\n    this.valueListObserver.start()\n  }\n\n  stop() {\n    this.valueListObserver.stop()\n  }\n\n  get controllerAttribute() {\n    return this.schema.controllerAttribute\n  }\n\n  // Value observer delegate\n\n  parseValueForToken(token: Token): Scope | undefined {\n    const { element, content: identifier } = token\n    const scopesByIdentifier = this.fetchScopesByIdentifierForElement(element)\n\n    let scope = scopesByIdentifier.get(identifier)\n    if (!scope) {\n      scope = this.delegate.createScopeForElementAndIdentifier(element, identifier)\n      scopesByIdentifier.set(identifier, scope)\n    }\n\n    return scope\n  }\n\n  elementMatchedValue(element: Element, value: Scope) {\n    const referenceCount = (this.scopeReferenceCounts.get(value) || 0) + 1\n    this.scopeReferenceCounts.set(value, referenceCount)\n    if (referenceCount == 1) {\n      this.delegate.scopeConnected(value)\n    }\n  }\n\n  elementUnmatchedValue(element: Element, value: Scope) {\n    const referenceCount = this.scopeReferenceCounts.get(value)\n    if (referenceCount) {\n      this.scopeReferenceCounts.set(value, referenceCount - 1)\n      if (referenceCount == 1) {\n        this.delegate.scopeDisconnected(value)\n      }\n    }\n  }\n\n  private fetchScopesByIdentifierForElement(element: Element) {\n    let scopesByIdentifier = this.scopesByIdentifierByElement.get(element)\n    if (!scopesByIdentifier) {\n      scopesByIdentifier = new Map()\n      this.scopesByIdentifierByElement.set(element, scopesByIdentifier)\n    }\n    return scopesByIdentifier\n  }\n}\n","import { Application } from \"./application\"\nimport { Context } from \"./context\"\nimport { Definition } from \"./definition\"\nimport { Module } from \"./module\"\nimport { Multimap } from \"../multimap\"\nimport { Scope } from \"./scope\"\nimport { ScopeObserver, ScopeObserverDelegate } from \"./scope_observer\"\n\nexport class Router implements ScopeObserverDelegate {\n  readonly application: Application\n  private scopeObserver: ScopeObserver\n  private scopesByIdentifier: Multimap<string, Scope>\n  private modulesByIdentifier: Map<string, Module>\n\n  constructor(application: Application) {\n    this.application = application\n    this.scopeObserver = new ScopeObserver(this.element, this.schema, this)\n    this.scopesByIdentifier = new Multimap()\n    this.modulesByIdentifier = new Map()\n  }\n\n  get element() {\n    return this.application.element\n  }\n\n  get schema() {\n    return this.application.schema\n  }\n\n  get logger() {\n    return this.application.logger\n  }\n\n  get controllerAttribute(): string {\n    return this.schema.controllerAttribute\n  }\n\n  get modules() {\n    return Array.from(this.modulesByIdentifier.values())\n  }\n\n  get contexts() {\n    return this.modules.reduce((contexts, module) => contexts.concat(module.contexts), [] as Context[])\n  }\n\n  start() {\n    this.scopeObserver.start()\n  }\n\n  stop() {\n    this.scopeObserver.stop()\n  }\n\n  loadDefinition(definition: Definition) {\n    this.unloadIdentifier(definition.identifier)\n    const module = new Module(this.application, definition)\n    this.connectModule(module)\n    const afterLoad = (definition.controllerConstructor as any).afterLoad\n    if (afterLoad) {\n      afterLoad.call(definition.controllerConstructor, definition.identifier, this.application)\n    }\n  }\n\n  unloadIdentifier(identifier: string) {\n    const module = this.modulesByIdentifier.get(identifier)\n    if (module) {\n      this.disconnectModule(module)\n    }\n  }\n\n  getContextForElementAndIdentifier(element: Element, identifier: string) {\n    const module = this.modulesByIdentifier.get(identifier)\n    if (module) {\n      return module.contexts.find((context) => context.element == element)\n    }\n  }\n\n  // Error handler delegate\n\n  handleError(error: Error, message: string, detail: any) {\n    this.application.handleError(error, message, detail)\n  }\n\n  // Scope observer delegate\n\n  createScopeForElementAndIdentifier(element: Element, identifier: string) {\n    return new Scope(this.schema, element, identifier, this.logger)\n  }\n\n  scopeConnected(scope: Scope) {\n    this.scopesByIdentifier.add(scope.identifier, scope)\n    const module = this.modulesByIdentifier.get(scope.identifier)\n    if (module) {\n      module.connectContextForScope(scope)\n    }\n  }\n\n  scopeDisconnected(scope: Scope) {\n    this.scopesByIdentifier.delete(scope.identifier, scope)\n    const module = this.modulesByIdentifier.get(scope.identifier)\n    if (module) {\n      module.disconnectContextForScope(scope)\n    }\n  }\n\n  // Modules\n\n  private connectModule(module: Module) {\n    this.modulesByIdentifier.set(module.identifier, module)\n    const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier)\n    scopes.forEach((scope) => module.connectContextForScope(scope))\n  }\n\n  private disconnectModule(module: Module) {\n    this.modulesByIdentifier.delete(module.identifier)\n    const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier)\n    scopes.forEach((scope) => module.disconnectContextForScope(scope))\n  }\n}\n","export interface Schema {\n  controllerAttribute: string\n  actionAttribute: string\n  targetAttribute: string\n  targetAttributeForScope(identifier: string): string\n  outletAttributeForScope(identifier: string, outlet: string): string\n  keyMappings: { [key: string]: string }\n}\n\nexport const defaultSchema: Schema = {\n  controllerAttribute: \"data-controller\",\n  actionAttribute: \"data-action\",\n  targetAttribute: \"data-target\",\n  targetAttributeForScope: (identifier) => `data-${identifier}-target`,\n  outletAttributeForScope: (identifier, outlet) => `data-${identifier}-${outlet}-outlet`,\n  keyMappings: {\n    enter: \"Enter\",\n    tab: \"Tab\",\n    esc: \"Escape\",\n    space: \" \",\n    up: \"ArrowUp\",\n    down: \"ArrowDown\",\n    left: \"ArrowLeft\",\n    right: \"ArrowRight\",\n    home: \"Home\",\n    end: \"End\",\n    page_up: \"PageUp\",\n    page_down: \"PageDown\",\n    // [a-z]\n    ...objectFromEntries(\"abcdefghijklmnopqrstuvwxyz\".split(\"\").map((c) => [c, c])),\n    // [0-9]\n    ...objectFromEntries(\"0123456789\".split(\"\").map((n) => [n, n])),\n  },\n}\n\nfunction objectFromEntries(array: [string, any][]): object {\n  // polyfill\n  return array.reduce((memo, [k, v]) => ({ ...memo, [k]: v }), {})\n}\n","import { Controller, ControllerConstructor } from \"./controller\"\nimport { Definition } from \"./definition\"\nimport { Dispatcher } from \"./dispatcher\"\nimport { ErrorHandler } from \"./error_handler\"\nimport { Logger } from \"./logger\"\nimport { Router } from \"./router\"\nimport { Schema, defaultSchema } from \"./schema\"\nimport { ActionDescriptorFilter, ActionDescriptorFilters, defaultActionDescriptorFilters } from \"./action_descriptor\"\n\nexport class Application implements ErrorHandler {\n  readonly element: Element\n  readonly schema: Schema\n  readonly dispatcher: Dispatcher\n  readonly router: Router\n  readonly actionDescriptorFilters: ActionDescriptorFilters\n  logger: Logger = console\n  debug = false\n\n  static start(element?: Element, schema?: Schema): Application {\n    const application = new this(element, schema)\n    application.start()\n    return application\n  }\n\n  constructor(element: Element = document.documentElement, schema: Schema = defaultSchema) {\n    this.element = element\n    this.schema = schema\n    this.dispatcher = new Dispatcher(this)\n    this.router = new Router(this)\n    this.actionDescriptorFilters = { ...defaultActionDescriptorFilters }\n  }\n\n  async start() {\n    await domReady()\n    this.logDebugActivity(\"application\", \"starting\")\n    this.dispatcher.start()\n    this.router.start()\n    this.logDebugActivity(\"application\", \"start\")\n  }\n\n  stop() {\n    this.logDebugActivity(\"application\", \"stopping\")\n    this.dispatcher.stop()\n    this.router.stop()\n    this.logDebugActivity(\"application\", \"stop\")\n  }\n\n  register(identifier: string, controllerConstructor: ControllerConstructor) {\n    this.load({ identifier, controllerConstructor })\n  }\n\n  registerActionOption(name: string, filter: ActionDescriptorFilter) {\n    this.actionDescriptorFilters[name] = filter\n  }\n\n  load(...definitions: Definition[]): void\n  load(definitions: Definition[]): void\n  load(head: Definition | Definition[], ...rest: Definition[]) {\n    const definitions = Array.isArray(head) ? head : [head, ...rest]\n    definitions.forEach((definition) => {\n      if ((definition.controllerConstructor as any).shouldLoad) {\n        this.router.loadDefinition(definition)\n      }\n    })\n  }\n\n  unload(...identifiers: string[]): void\n  unload(identifiers: string[]): void\n  unload(head: string | string[], ...rest: string[]) {\n    const identifiers = Array.isArray(head) ? head : [head, ...rest]\n    identifiers.forEach((identifier) => this.router.unloadIdentifier(identifier))\n  }\n\n  // Controllers\n\n  get controllers(): Controller[] {\n    return this.router.contexts.map((context) => context.controller)\n  }\n\n  getControllerForElementAndIdentifier(element: Element, identifier: string): Controller | null {\n    const context = this.router.getContextForElementAndIdentifier(element, identifier)\n    return context ? context.controller : null\n  }\n\n  // Error handling\n\n  handleError(error: Error, message: string, detail: object) {\n    this.logger.error(`%s\\n\\n%o\\n\\n%o`, message, error, detail)\n\n    window.onerror?.(message, \"\", 0, 0, error)\n  }\n\n  // Debug logging\n\n  logDebugActivity = (identifier: string, functionName: string, detail: object = {}): void => {\n    if (this.debug) {\n      this.logFormattedMessage(identifier, functionName, detail)\n    }\n  }\n\n  private logFormattedMessage(identifier: string, functionName: string, detail: object = {}) {\n    detail = Object.assign({ application: this }, detail)\n\n    this.logger.groupCollapsed(`${identifier} #${functionName}`)\n    this.logger.log(\"details:\", { ...detail })\n    this.logger.groupEnd()\n  }\n}\n\nfunction domReady() {\n  return new Promise<void>((resolve) => {\n    if (document.readyState == \"loading\") {\n      document.addEventListener(\"DOMContentLoaded\", () => resolve())\n    } else {\n      resolve()\n    }\n  })\n}\n","import { Constructor } from \"./constructor\"\nimport { Controller } from \"./controller\"\nimport { readInheritableStaticObjectPairs } from \"./inheritable_statics\"\nimport { camelize, capitalize, dasherize } from \"./string_helpers\"\nimport { isSomething, hasProperty } from \"./utils\"\n\nexport function ValuePropertiesBlessing<T>(constructor: Constructor<T>) {\n  const valueDefinitionPairs = readInheritableStaticObjectPairs<T, ValueTypeDefinition>(constructor, \"values\")\n  const propertyDescriptorMap: PropertyDescriptorMap = {\n    valueDescriptorMap: {\n      get(this: Controller) {\n        return valueDefinitionPairs.reduce((result, valueDefinitionPair) => {\n          const valueDescriptor = parseValueDefinitionPair(valueDefinitionPair, this.identifier)\n          const attributeName = this.data.getAttributeNameForKey(valueDescriptor.key)\n          return Object.assign(result, { [attributeName]: valueDescriptor })\n        }, {} as ValueDescriptorMap)\n      },\n    },\n  }\n\n  return valueDefinitionPairs.reduce((properties, valueDefinitionPair) => {\n    return Object.assign(properties, propertiesForValueDefinitionPair(valueDefinitionPair))\n  }, propertyDescriptorMap)\n}\n\nexport function propertiesForValueDefinitionPair<T>(\n  valueDefinitionPair: ValueDefinitionPair,\n  controller?: string\n): PropertyDescriptorMap {\n  const definition = parseValueDefinitionPair(valueDefinitionPair, controller)\n  const { key, name, reader: read, writer: write } = definition\n\n  return {\n    [name]: {\n      get(this: Controller) {\n        const value = this.data.get(key)\n        if (value !== null) {\n          return read(value)\n        } else {\n          return definition.defaultValue\n        }\n      },\n\n      set(this: Controller, value: T | undefined) {\n        if (value === undefined) {\n          this.data.delete(key)\n        } else {\n          this.data.set(key, write(value))\n        }\n      },\n    },\n\n    [`has${capitalize(name)}`]: {\n      get(this: Controller): boolean {\n        return this.data.has(key) || definition.hasCustomDefaultValue\n      },\n    },\n  }\n}\n\nexport type ValueDescriptor = {\n  type: ValueType\n  key: string\n  name: string\n  defaultValue: ValueTypeDefault\n  hasCustomDefaultValue: boolean\n  reader: Reader\n  writer: Writer\n}\n\nexport type ValueDescriptorMap = { [attributeName: string]: ValueDescriptor }\n\nexport type ValueDefinitionMap = { [token: string]: ValueTypeDefinition }\n\nexport type ValueDefinitionPair = [string, ValueTypeDefinition]\n\nexport type ValueTypeConstant = typeof Array | typeof Boolean | typeof Number | typeof Object | typeof String\n\nexport type ValueTypeDefault = Array<any> | boolean | number | Object | string\n\nexport type ValueTypeObject = Partial<{ type: ValueTypeConstant; default: ValueTypeDefault }>\n\nexport type ValueTypeDefinition = ValueTypeConstant | ValueTypeDefault | ValueTypeObject\n\nexport type ValueType = \"array\" | \"boolean\" | \"number\" | \"object\" | \"string\"\n\nfunction parseValueDefinitionPair([token, typeDefinition]: ValueDefinitionPair, controller?: string): ValueDescriptor {\n  return valueDescriptorForTokenAndTypeDefinition({\n    controller,\n    token,\n    typeDefinition,\n  })\n}\n\nexport function parseValueTypeConstant(constant?: ValueTypeConstant) {\n  switch (constant) {\n    case Array:\n      return \"array\"\n    case Boolean:\n      return \"boolean\"\n    case Number:\n      return \"number\"\n    case Object:\n      return \"object\"\n    case String:\n      return \"string\"\n  }\n}\n\nexport function parseValueTypeDefault(defaultValue?: ValueTypeDefault) {\n  switch (typeof defaultValue) {\n    case \"boolean\":\n      return \"boolean\"\n    case \"number\":\n      return \"number\"\n    case \"string\":\n      return \"string\"\n  }\n\n  if (Array.isArray(defaultValue)) return \"array\"\n  if (Object.prototype.toString.call(defaultValue) === \"[object Object]\") return \"object\"\n}\n\ntype ValueTypeObjectPayload = {\n  controller?: string\n  token: string\n  typeObject: ValueTypeObject\n}\n\nexport function parseValueTypeObject(payload: ValueTypeObjectPayload) {\n  const { controller, token, typeObject } = payload\n\n  const hasType = isSomething(typeObject.type)\n  const hasDefault = isSomething(typeObject.default)\n\n  const fullObject = hasType && hasDefault\n  const onlyType = hasType && !hasDefault\n  const onlyDefault = !hasType && hasDefault\n\n  const typeFromObject = parseValueTypeConstant(typeObject.type)\n  const typeFromDefaultValue = parseValueTypeDefault(payload.typeObject.default)\n\n  if (onlyType) return typeFromObject\n  if (onlyDefault) return typeFromDefaultValue\n\n  if (typeFromObject !== typeFromDefaultValue) {\n    const propertyPath = controller ? `${controller}.${token}` : token\n\n    throw new Error(\n      `The specified default value for the Stimulus Value \"${propertyPath}\" must match the defined type \"${typeFromObject}\". The provided default value of \"${typeObject.default}\" is of type \"${typeFromDefaultValue}\".`\n    )\n  }\n\n  if (fullObject) return typeFromObject\n}\n\ntype ValueTypeDefinitionPayload = {\n  controller?: string\n  token: string\n  typeDefinition: ValueTypeDefinition\n}\n\nexport function parseValueTypeDefinition(payload: ValueTypeDefinitionPayload): ValueType {\n  const { controller, token, typeDefinition } = payload\n\n  const typeObject = { controller, token, typeObject: typeDefinition as ValueTypeObject }\n\n  const typeFromObject = parseValueTypeObject(typeObject as ValueTypeObjectPayload)\n  const typeFromDefaultValue = parseValueTypeDefault(typeDefinition as ValueTypeDefault)\n  const typeFromConstant = parseValueTypeConstant(typeDefinition as ValueTypeConstant)\n\n  const type = typeFromObject || typeFromDefaultValue || typeFromConstant\n\n  if (type) return type\n\n  const propertyPath = controller ? `${controller}.${typeDefinition}` : token\n\n  throw new Error(`Unknown value type \"${propertyPath}\" for \"${token}\" value`)\n}\n\nexport function defaultValueForDefinition(typeDefinition: ValueTypeDefinition): ValueTypeDefault {\n  const constant = parseValueTypeConstant(typeDefinition as ValueTypeConstant)\n  if (constant) return defaultValuesByType[constant]\n\n  const hasDefault = hasProperty(typeDefinition, \"default\")\n  const hasType = hasProperty(typeDefinition, \"type\")\n  const typeObject = typeDefinition as ValueTypeObject\n\n  if (hasDefault) return typeObject.default!\n\n  if (hasType) {\n    const { type } = typeObject\n    const constantFromType = parseValueTypeConstant(type)\n\n    if (constantFromType) return defaultValuesByType[constantFromType]\n  }\n\n  return typeDefinition\n}\n\nfunction valueDescriptorForTokenAndTypeDefinition(payload: ValueTypeDefinitionPayload) {\n  const { token, typeDefinition } = payload\n\n  const key = `${dasherize(token)}-value`\n  const type = parseValueTypeDefinition(payload)\n  return {\n    type,\n    key,\n    name: camelize(key),\n    get defaultValue() {\n      return defaultValueForDefinition(typeDefinition)\n    },\n    get hasCustomDefaultValue() {\n      return parseValueTypeDefault(typeDefinition) !== undefined\n    },\n    reader: readers[type],\n    writer: writers[type] || writers.default,\n  }\n}\n\nconst defaultValuesByType = {\n  get array() {\n    return []\n  },\n  boolean: false,\n  number: 0,\n  get object() {\n    return {}\n  },\n  string: \"\",\n}\n\ntype Reader = (value: string) => any\n\nconst readers: { [type: string]: Reader } = {\n  array(value: string): any[] {\n    const array = JSON.parse(value)\n    if (!Array.isArray(array)) {\n      throw new TypeError(\n        `expected value of type \"array\" but instead got value \"${value}\" of type \"${parseValueTypeDefault(array)}\"`\n      )\n    }\n    return array\n  },\n\n  boolean(value: string): boolean {\n    return !(value == \"0\" || String(value).toLowerCase() == \"false\")\n  },\n\n  number(value: string): number {\n    return Number(value)\n  },\n\n  object(value: string): object {\n    const object = JSON.parse(value)\n    if (object === null || typeof object != \"object\" || Array.isArray(object)) {\n      throw new TypeError(\n        `expected value of type \"object\" but instead got value \"${value}\" of type \"${parseValueTypeDefault(object)}\"`\n      )\n    }\n    return object\n  },\n\n  string(value: string): string {\n    return value\n  },\n}\n\ntype Writer = (value: any) => string\n\nconst writers: { [type: string]: Writer } = {\n  default: writeString,\n  array: writeJSON,\n  object: writeJSON,\n}\n\nfunction writeJSON(value: any) {\n  return JSON.stringify(value)\n}\n\nfunction writeString(value: any) {\n  return `${value}`\n}\n","import { Application } from \"./application\"\nimport { ClassPropertiesBlessing } from \"./class_properties\"\nimport { Constructor } from \"./constructor\"\nimport { Context } from \"./context\"\nimport { OutletPropertiesBlessing } from \"./outlet_properties\"\nimport { TargetPropertiesBlessing } from \"./target_properties\"\nimport { ValuePropertiesBlessing, ValueDefinitionMap } from \"./value_properties\"\n\nexport type ControllerConstructor = Constructor<Controller>\n\ntype DispatchOptions = Partial<{\n  target: Element | Window | Document\n  detail: Object\n  prefix: string\n  bubbles: boolean\n  cancelable: boolean\n}>\n\nexport class Controller<ElementType extends Element = Element> {\n  static blessings = [\n    ClassPropertiesBlessing,\n    TargetPropertiesBlessing,\n    ValuePropertiesBlessing,\n    OutletPropertiesBlessing,\n  ]\n  static targets: string[] = []\n  static outlets: string[] = []\n  static values: ValueDefinitionMap = {}\n\n  static get shouldLoad() {\n    return true\n  }\n\n  static afterLoad(_identifier: string, _application: Application) {\n    return\n  }\n\n  readonly context: Context\n\n  constructor(context: Context) {\n    this.context = context\n  }\n\n  get application() {\n    return this.context.application\n  }\n\n  get scope() {\n    return this.context.scope\n  }\n\n  get element() {\n    return this.scope.element as ElementType\n  }\n\n  get identifier() {\n    return this.scope.identifier\n  }\n\n  get targets() {\n    return this.scope.targets\n  }\n\n  get outlets() {\n    return this.scope.outlets\n  }\n\n  get classes() {\n    return this.scope.classes\n  }\n\n  get data() {\n    return this.scope.data\n  }\n\n  initialize() {\n    // Override in your subclass to set up initial controller state\n  }\n\n  connect() {\n    // Override in your subclass to respond when the controller is connected to the DOM\n  }\n\n  disconnect() {\n    // Override in your subclass to respond when the controller is disconnected from the DOM\n  }\n\n  dispatch(\n    eventName: string,\n    {\n      target = this.element,\n      detail = {},\n      prefix = this.identifier,\n      bubbles = true,\n      cancelable = true,\n    }: DispatchOptions = {}\n  ) {\n    const type = prefix ? `${prefix}:${eventName}` : eventName\n    const event = new CustomEvent(type, { detail, bubbles, cancelable })\n    target.dispatchEvent(event)\n    return event\n  }\n}\n","import { Constructor } from \"./constructor\"\nimport { Controller } from \"./controller\"\nimport { readInheritableStaticArrayValues } from \"./inheritable_statics\"\nimport { capitalize } from \"./string_helpers\"\n\nexport function ClassPropertiesBlessing<T>(constructor: Constructor<T>) {\n  const classes = readInheritableStaticArrayValues(constructor, \"classes\")\n  return classes.reduce((properties, classDefinition) => {\n    return Object.assign(properties, propertiesForClassDefinition(classDefinition))\n  }, {} as PropertyDescriptorMap)\n}\n\nfunction propertiesForClassDefinition(key: string) {\n  return {\n    [`${key}Class`]: {\n      get(this: Controller) {\n        const { classes } = this\n        if (classes.has(key)) {\n          return classes.get(key)\n        } else {\n          const attribute = classes.getAttributeName(key)\n          throw new Error(`Missing attribute \"${attribute}\"`)\n        }\n      },\n    },\n\n    [`${key}Classes`]: {\n      get(this: Controller) {\n        return this.classes.getAll(key)\n      },\n    },\n\n    [`has${capitalize(key)}Class`]: {\n      get(this: Controller) {\n        return this.classes.has(key)\n      },\n    },\n  }\n}\n","import { Constructor } from \"./constructor\"\nimport { Controller } from \"./controller\"\nimport { readInheritableStaticArrayValues } from \"./inheritable_statics\"\nimport { capitalize } from \"./string_helpers\"\n\nexport function TargetPropertiesBlessing<T>(constructor: Constructor<T>) {\n  const targets = readInheritableStaticArrayValues(constructor, \"targets\")\n  return targets.reduce((properties, targetDefinition) => {\n    return Object.assign(properties, propertiesForTargetDefinition(targetDefinition))\n  }, {} as PropertyDescriptorMap)\n}\n\nfunction propertiesForTargetDefinition(name: string) {\n  return {\n    [`${name}Target`]: {\n      get(this: Controller) {\n        const target = this.targets.find(name)\n        if (target) {\n          return target\n        } else {\n          throw new Error(`Missing target element \"${name}\" for \"${this.identifier}\" controller`)\n        }\n      },\n    },\n\n    [`${name}Targets`]: {\n      get(this: Controller) {\n        return this.targets.findAll(name)\n      },\n    },\n\n    [`has${capitalize(name)}Target`]: {\n      get(this: Controller) {\n        return this.targets.has(name)\n      },\n    },\n  }\n}\n","import { Constructor } from \"./constructor\"\nimport { Controller } from \"./controller\"\nimport { readInheritableStaticArrayValues } from \"./inheritable_statics\"\nimport { capitalize, namespaceCamelize } from \"./string_helpers\"\n\nexport function OutletPropertiesBlessing<T>(constructor: Constructor<T>) {\n  const outlets = readInheritableStaticArrayValues(constructor, \"outlets\")\n  return outlets.reduce((properties: any, outletDefinition: any) => {\n    return Object.assign(properties, propertiesForOutletDefinition(outletDefinition))\n  }, {} as PropertyDescriptorMap)\n}\n\nfunction propertiesForOutletDefinition(name: string) {\n  const camelizedName = namespaceCamelize(name)\n\n  return {\n    [`${camelizedName}Outlet`]: {\n      get(this: Controller) {\n        const outlet = this.outlets.find(name)\n\n        if (outlet) {\n          const outletController = this.application.getControllerForElementAndIdentifier(outlet, name)\n          if (outletController) {\n            return outletController\n          } else {\n            throw new Error(\n              `Missing \"${this.application.schema.controllerAttribute}=${name}\" attribute on outlet element for \"${this.identifier}\" controller`\n            )\n          }\n        }\n\n        throw new Error(`Missing outlet element \"${name}\" for \"${this.identifier}\" controller`)\n      },\n    },\n\n    [`${camelizedName}Outlets`]: {\n      get(this: Controller) {\n        const outlets = this.outlets.findAll(name)\n\n        if (outlets.length > 0) {\n          return outlets\n            .map((outlet: Element) => {\n              const controller = this.application.getControllerForElementAndIdentifier(outlet, name)\n              if (controller) {\n                return controller\n              } else {\n                console.warn(\n                  `The provided outlet element is missing the outlet controller \"${name}\" for \"${this.identifier}\"`,\n                  outlet\n                )\n              }\n            })\n            .filter((controller) => controller) as Controller[]\n        }\n\n        return []\n      },\n    },\n\n    [`${camelizedName}OutletElement`]: {\n      get(this: Controller) {\n        const outlet = this.outlets.find(name)\n        if (outlet) {\n          return outlet\n        } else {\n          throw new Error(`Missing outlet element \"${name}\" for \"${this.identifier}\" controller`)\n        }\n      },\n    },\n\n    [`${camelizedName}OutletElements`]: {\n      get(this: Controller) {\n        return this.outlets.findAll(name)\n      },\n    },\n\n    [`has${capitalize(camelizedName)}Outlet`]: {\n      get(this: Controller) {\n        return this.outlets.has(name)\n      },\n    },\n  }\n}\n"],"names":["EventListener","constructor","eventTarget","eventName","eventOptions","this","unorderedBindings","Set","connect","addEventListener","disconnect","removeEventListener","bindingConnected","binding","add","bindingDisconnected","delete","handleEvent","event","extendedEvent","stopImmediatePropagation","Object","assign","immediatePropagationStopped","call","extendEvent","bindings","hasBindings","size","Array","from","sort","left","right","leftIndex","index","rightIndex","Dispatcher","application","eventListenerMaps","Map","started","start","eventListeners","forEach","eventListener","stop","values","reduce","listeners","map","concat","fetchEventListenerForBinding","clearEventListeners","clearEventListenersForBinding","handleError","error","message","detail","removeMappedEventListenerFor","eventListenerMap","fetchEventListenerMapForEventTarget","cacheKey","fetchEventListener","get","createEventListener","set","parts","keys","key","push","join","defaultActionDescriptorFilters","value","stopPropagation","prevent","preventDefault","self","element","target","descriptorPattern","parseEventTarget","eventTargetName","window","document","camelize","replace","_","char","toUpperCase","namespaceCamelize","capitalize","charAt","slice","dasherize","toLowerCase","isSomething","object","hasProperty","property","prototype","hasOwnProperty","allModifiers","defaultEventNames","a","button","form","details","input","e","getAttribute","select","textarea","Error","typecast","JSON","parse","o_O","Binding","context","action","identifier","willBeInvokedByEvent","applyEventModifiers","invokeWithEvent","method","controller","methodName","actionDescriptorFilters","passes","name","entries","filter","currentTarget","params","actionEvent","logDebugActivity","KeyboardEvent","shouldIgnoreKeyboardEvent","MouseEvent","shouldIgnoreMouseEvent","Element","contains","scope","containsElement","ElementObserver","delegate","attributes","childList","subtree","elements","mutationObserver","MutationObserver","mutations","processMutations","observe","mutationObserverInit","refresh","pause","callback","takeRecords","matches","matchElementsInTree","has","removeElement","addElement","mutation","processMutation","type","processAttributeChange","attributeName","processRemovedNodes","removedNodes","processAddedNodes","addedNodes","elementAttributeChanged","matchElement","nodes","node","elementFromNode","processTree","elementIsActive","tree","processor","nodeType","Node","ELEMENT_NODE","isConnected","elementMatched","elementUnmatched","AttributeObserver","elementObserver","selector","hasAttribute","match","querySelectorAll","elementMatchedAttribute","elementUnmatchedAttribute","elementAttributeValueChanged","fetch","del","prune","Multimap","valuesByKey","hasKey","hasValue","some","getValuesForKey","getKeysForValue","_key","_values","IndexedMultimap","super","keysByValue","SelectorObserver","_selector","matchesByElement","selectorMatchElement","selectorMatched","selectors","selectorUnmatched","_attributeName","matchedBefore","StringMapObserver","stringMap","attributeOldValue","knownAttributeNames","refreshAttribute","oldValue","getStringMapKeyForAttribute","stringMapKeyAdded","stringMapValueChanged","stringMapKeyRemoved","currentAttributeNames","recordedAttributeNames","attribute","TokenListObserver","attributeObserver","tokensByElement","tokensMatched","readTokensForElement","unmatchedTokens","matchedTokens","refreshTokensForElement","tokensUnmatched","tokens","token","tokenMatched","tokenUnmatched","previousTokens","currentTokens","firstDifferingIndex","length","Math","max","zip","findIndex","previousToken","currentToken","content","tokenString","trim","split","parseTokenString","ValueListObserver","tokenListObserver","parseResultsByToken","WeakMap","valuesByTokenByElement","fetchParseResultForToken","fetchValuesByTokenForElement","elementMatchedValue","elementUnmatchedValue","parseResult","parseToken","valuesByToken","parseValueForToken","BindingObserver","bindingsByAction","valueListObserver","actionAttribute","disconnectAllActions","schema","connectAction","disconnectAction","clear","forToken","descriptorString","keyFilter","includes","options","test","parseActionDescriptorString","descriptor","tagName","getDefaultEventNameForElement","toString","eventFilter","filters","keyFilterDissatisfied","standardFilter","keyMappings","pattern","RegExp","meta","ctrl","alt","shift","modifier","metaKey","ctrlKey","altKey","shiftKey","ValueObserver","receiver","stringMapObserver","valueDescriptorMap","invokeChangedCallbacksForDefaultValues","invokeChangedCallback","writer","defaultValue","valueDescriptorNameMap","valueDescriptors","undefined","data","rawValue","rawOldValue","changedMethodName","changedMethod","reader","TypeError","descriptors","hasMethodName","TargetObserver","targetsByName","disconnectAllTargets","connectTarget","disconnectTarget","targetConnected","targetDisconnected","readInheritableStaticArrayValues","propertyName","ancestors","getAncestorsForConstructor","definition","isArray","getOwnStaticArrayValues","readInheritableStaticObjectPairs","pairs","getOwnStaticObjectPairs","getPrototypeOf","reverse","OutletObserver","outletsByName","outletElementsByName","selectorObserverMap","attributeObserverMap","outletDefinitions","outletName","setupSelectorObserverForOutlet","setupAttributeObserverForOutlet","dependentContexts","observer","disconnectAllOutlets","stopSelectorObservers","stopAttributeObservers","outlet","getOutlet","connectOutlet","getOutletFromMap","disconnectOutlet","hasOutlet","hasOutletController","controllerAttribute","_element","getOutletNameFromOutletAttributeName","updateSelectorObserverForOutlet","outletConnected","outletDisconnected","selectorObserver","body","attributeNameForOutletName","outlets","getSelectorForOutletName","outletAttributeForScope","find","outletDependencies","dependencies","router","modules","module","controllerConstructor","dependentControllerIdentifiers","identifiers","contexts","getControllerForElementAndIdentifier","Context","functionName","bindingObserver","dispatcher","valueObserver","targetObserver","outletObserver","initialize","parentElement","invokeControllerMethod","args","bless","properties","shadowConstructor","extend","shadowProperties","getOwnKeys","shadowingDescriptor","getOwnPropertyDescriptor","getShadowedDescriptor","getShadowProperties","defineProperties","shadow","blessedProperties","blessing","getBlessedProperties","getOwnPropertySymbols","getOwnPropertyNames","extendWithReflect","extended","Reflect","construct","arguments","create","setPrototypeOf","b","testReflectExtension","Module","blessDefinition","contextsByScope","connectedContexts","connectContextForScope","fetchContextForScope","disconnectContextForScope","ClassMap","getDataKey","getAll","getAttributeName","getAttributeNameForKey","DataMap","setAttribute","removeAttribute","Guide","logger","warn","warnedKeys","warnedKeysByObject","attributeValueContainsToken","TargetSet","targetName","targetNames","findTarget","findLegacyTarget","findAll","targets","findAllTargets","findAllLegacyTargets","getSelectorForTargetName","findElement","findAllElements","targetAttributeForScope","getLegacySelectorForTargetName","deprecate","targetDescriptor","targetAttribute","revisedAttributeName","guide","OutletSet","controllerElement","outletNames","findOutlet","findAllOutlets","queryElements","matchesElement","Scope","closest","controllerSelector","documentScope","isDocumentScope","documentElement","ScopeObserver","scopesByIdentifierByElement","scopeReferenceCounts","scopesByIdentifier","fetchScopesByIdentifierForElement","createScopeForElementAndIdentifier","referenceCount","scopeConnected","scopeDisconnected","Router","scopeObserver","modulesByIdentifier","loadDefinition","unloadIdentifier","connectModule","afterLoad","disconnectModule","getContextForElementAndIdentifier","defaultSchema","enter","tab","esc","space","up","down","home","end","page_up","page_down","objectFromEntries","c","n","array","memo","k","v","Application","console","debug","logFormattedMessage","Promise","resolve","readyState","register","load","registerActionOption","head","rest","shouldLoad","unload","controllers","onerror","groupCollapsed","log","groupEnd","parseValueDefinitionPair","typeDefinition","payload","typeFromObject","typeObject","hasType","hasDefault","default","fullObject","onlyType","onlyDefault","parseValueTypeConstant","typeFromDefaultValue","parseValueTypeDefault","parseValueTypeObject","typeFromConstant","parseValueTypeDefinition","constant","defaultValuesByType","constantFromType","defaultValueForDefinition","hasCustomDefaultValue","readers","writers","valueDescriptorForTokenAndTypeDefinition","Boolean","Number","String","boolean","number","string","writeJSON","stringify","Controller","_identifier","_application","classes","dispatch","prefix","bubbles","cancelable","CustomEvent","dispatchEvent","classDefinition","targetDefinition","valueDefinitionPairs","propertyDescriptorMap","result","valueDefinitionPair","valueDescriptor","read","write","propertiesForValueDefinitionPair","outletDefinition","camelizedName","outletController","propertiesForOutletDefinition"],"mappings":"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"}
{"version":3,"file":"stimulus.min.js","sources":["../src/core/event_listener.ts","../src/core/dispatcher.ts","../src/core/action_descriptor.ts","../src/core/string_helpers.ts","../src/core/utils.ts","../src/core/action.ts","../src/core/binding.ts","../src/mutation-observers/element_observer.ts","../src/mutation-observers/attribute_observer.ts","../src/multimap/set_operations.ts","../src/multimap/multimap.ts","../src/multimap/indexed_multimap.ts","../src/mutation-observers/selector_observer.ts","../src/mutation-observers/string_map_observer.ts","../src/mutation-observers/token_list_observer.ts","../src/mutation-observers/value_list_observer.ts","../src/core/binding_observer.ts","../src/core/value_observer.ts","../src/core/target_observer.ts","../src/core/inheritable_statics.ts","../src/core/outlet_observer.ts","../src/core/context.ts","../src/core/blessing.ts","../src/core/module.ts","../src/core/definition.ts","../src/core/class_map.ts","../src/core/data_map.ts","../src/core/guide.ts","../src/core/selectors.ts","../src/core/target_set.ts","../src/core/outlet_set.ts","../src/core/scope.ts","../src/core/scope_observer.ts","../src/core/router.ts","../src/core/schema.ts","../src/core/application.ts","../src/core/value_properties.ts","../src/core/controller.ts","../src/core/class_properties.ts","../src/core/target_properties.ts","../src/core/outlet_properties.ts"],"sourcesContent":["import { Binding } from \"./binding\"\n\nexport class EventListener implements EventListenerObject {\n  readonly eventTarget: EventTarget\n  readonly eventName: string\n  readonly eventOptions: AddEventListenerOptions\n  private unorderedBindings: Set<Binding>\n\n  constructor(eventTarget: EventTarget, eventName: string, eventOptions: AddEventListenerOptions) {\n    this.eventTarget = eventTarget\n    this.eventName = eventName\n    this.eventOptions = eventOptions\n    this.unorderedBindings = new Set()\n  }\n\n  connect() {\n    this.eventTarget.addEventListener(this.eventName, this, this.eventOptions)\n  }\n\n  disconnect() {\n    this.eventTarget.removeEventListener(this.eventName, this, this.eventOptions)\n  }\n\n  // Binding observer delegate\n\n  bindingConnected(binding: Binding) {\n    this.unorderedBindings.add(binding)\n  }\n\n  bindingDisconnected(binding: Binding) {\n    this.unorderedBindings.delete(binding)\n  }\n\n  handleEvent(event: Event) {\n    // FIXME: Determine why TS won't recognize that the extended event has immediatePropagationStopped\n    const extendedEvent = extendEvent(event) as any\n    for (const binding of this.bindings) {\n      if (extendedEvent.immediatePropagationStopped) {\n        break\n      } else {\n        binding.handleEvent(extendedEvent)\n      }\n    }\n  }\n\n  hasBindings() {\n    return this.unorderedBindings.size > 0\n  }\n\n  get bindings(): Binding[] {\n    return Array.from(this.unorderedBindings).sort((left, right) => {\n      const leftIndex = left.index,\n        rightIndex = right.index\n      return leftIndex < rightIndex ? -1 : leftIndex > rightIndex ? 1 : 0\n    })\n  }\n}\n\nfunction extendEvent(event: Event) {\n  if (\"immediatePropagationStopped\" in event) {\n    return event\n  } else {\n    const { stopImmediatePropagation } = event\n    return Object.assign(event, {\n      immediatePropagationStopped: false,\n      stopImmediatePropagation() {\n        this.immediatePropagationStopped = true\n        stopImmediatePropagation.call(this)\n      },\n    })\n  }\n}\n","import { Application } from \"./application\"\nimport { Binding } from \"./binding\"\nimport { BindingObserverDelegate } from \"./binding_observer\"\nimport { EventListener } from \"./event_listener\"\n\nexport class Dispatcher implements BindingObserverDelegate {\n  readonly application: Application\n  private eventListenerMaps: Map<EventTarget, Map<string, EventListener>>\n  private started: boolean\n\n  constructor(application: Application) {\n    this.application = application\n    this.eventListenerMaps = new Map()\n    this.started = false\n  }\n\n  start() {\n    if (!this.started) {\n      this.started = true\n      this.eventListeners.forEach((eventListener) => eventListener.connect())\n    }\n  }\n\n  stop() {\n    if (this.started) {\n      this.started = false\n      this.eventListeners.forEach((eventListener) => eventListener.disconnect())\n    }\n  }\n\n  get eventListeners(): EventListener[] {\n    return Array.from(this.eventListenerMaps.values()).reduce(\n      (listeners, map) => listeners.concat(Array.from(map.values())),\n      [] as EventListener[]\n    )\n  }\n\n  // Binding observer delegate\n\n  bindingConnected(binding: Binding) {\n    this.fetchEventListenerForBinding(binding).bindingConnected(binding)\n  }\n\n  bindingDisconnected(binding: Binding, clearEventListeners = false) {\n    this.fetchEventListenerForBinding(binding).bindingDisconnected(binding)\n    if (clearEventListeners) this.clearEventListenersForBinding(binding)\n  }\n\n  // Error handling\n\n  handleError(error: Error, message: string, detail: object = {}) {\n    this.application.handleError(error, `Error ${message}`, detail)\n  }\n\n  private clearEventListenersForBinding(binding: Binding) {\n    const eventListener = this.fetchEventListenerForBinding(binding)\n    if (!eventListener.hasBindings()) {\n      eventListener.disconnect()\n      this.removeMappedEventListenerFor(binding)\n    }\n  }\n\n  private removeMappedEventListenerFor(binding: Binding) {\n    const { eventTarget, eventName, eventOptions } = binding\n    const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget)\n    const cacheKey = this.cacheKey(eventName, eventOptions)\n\n    eventListenerMap.delete(cacheKey)\n    if (eventListenerMap.size == 0) this.eventListenerMaps.delete(eventTarget)\n  }\n\n  private fetchEventListenerForBinding(binding: Binding): EventListener {\n    const { eventTarget, eventName, eventOptions } = binding\n    return this.fetchEventListener(eventTarget, eventName, eventOptions)\n  }\n\n  private fetchEventListener(\n    eventTarget: EventTarget,\n    eventName: string,\n    eventOptions: AddEventListenerOptions\n  ): EventListener {\n    const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget)\n    const cacheKey = this.cacheKey(eventName, eventOptions)\n    let eventListener = eventListenerMap.get(cacheKey)\n    if (!eventListener) {\n      eventListener = this.createEventListener(eventTarget, eventName, eventOptions)\n      eventListenerMap.set(cacheKey, eventListener)\n    }\n    return eventListener\n  }\n\n  private createEventListener(\n    eventTarget: EventTarget,\n    eventName: string,\n    eventOptions: AddEventListenerOptions\n  ): EventListener {\n    const eventListener = new EventListener(eventTarget, eventName, eventOptions)\n    if (this.started) {\n      eventListener.connect()\n    }\n    return eventListener\n  }\n\n  private fetchEventListenerMapForEventTarget(eventTarget: EventTarget): Map<string, EventListener> {\n    let eventListenerMap = this.eventListenerMaps.get(eventTarget)\n    if (!eventListenerMap) {\n      eventListenerMap = new Map()\n      this.eventListenerMaps.set(eventTarget, eventListenerMap)\n    }\n    return eventListenerMap\n  }\n\n  private cacheKey(eventName: string, eventOptions: any): string {\n    const parts = [eventName]\n    Object.keys(eventOptions)\n      .sort()\n      .forEach((key) => {\n        parts.push(`${eventOptions[key] ? \"\" : \"!\"}${key}`)\n      })\n    return parts.join(\":\")\n  }\n}\n","export type ActionDescriptorFilters = Record<string, ActionDescriptorFilter>\nexport type ActionDescriptorFilter = (options: ActionDescriptorFilterOptions) => boolean\ntype ActionDescriptorFilterOptions = {\n  name: string\n  value: boolean\n  event: Event\n  element: Element\n}\n\nexport const defaultActionDescriptorFilters: ActionDescriptorFilters = {\n  stop({ event, value }) {\n    if (value) event.stopPropagation()\n\n    return true\n  },\n\n  prevent({ event, value }) {\n    if (value) event.preventDefault()\n\n    return true\n  },\n\n  self({ event, value, element }) {\n    if (value) {\n      return element === event.target\n    } else {\n      return true\n    }\n  },\n}\n\nexport interface ActionDescriptor {\n  eventTarget: EventTarget\n  eventOptions: AddEventListenerOptions\n  eventName: string\n  identifier: string\n  methodName: string\n  keyFilter: string\n}\n\n// capture nos.:               1   1     2   2      3               3      4   4    5      5     6  6\nconst descriptorPattern = /^(?:(.+?)(?:\\.(.+?))?(?:@(window|document))?->)?(.+?)(?:#([^:]+?))(?::(.+))?$/\n\nexport function parseActionDescriptorString(descriptorString: string): Partial<ActionDescriptor> {\n  const source = descriptorString.trim()\n  const matches = source.match(descriptorPattern) || []\n  let eventName = matches[1]\n  let keyFilter = matches[2]\n\n  if (keyFilter && ![\"keydown\", \"keyup\", \"keypress\"].includes(eventName)) {\n    eventName += `.${keyFilter}`\n    keyFilter = \"\"\n  }\n\n  return {\n    eventTarget: parseEventTarget(matches[3]),\n    eventName,\n    eventOptions: matches[6] ? parseEventOptions(matches[6]) : {},\n    identifier: matches[4],\n    methodName: matches[5],\n    keyFilter,\n  }\n}\n\nfunction parseEventTarget(eventTargetName: string): EventTarget | undefined {\n  if (eventTargetName == \"window\") {\n    return window\n  } else if (eventTargetName == \"document\") {\n    return document\n  }\n}\n\nfunction parseEventOptions(eventOptions: string): AddEventListenerOptions {\n  return eventOptions\n    .split(\":\")\n    .reduce((options, token) => Object.assign(options, { [token.replace(/^!/, \"\")]: !/^!/.test(token) }), {})\n}\n\nexport function stringifyEventTarget(eventTarget: EventTarget) {\n  if (eventTarget == window) {\n    return \"window\"\n  } else if (eventTarget == document) {\n    return \"document\"\n  }\n}\n","export function camelize(value: string) {\n  return value.replace(/(?:[_-])([a-z0-9])/g, (_, char) => char.toUpperCase())\n}\n\nexport function namespaceCamelize(value: string) {\n  return camelize(value.replace(/--/g, \"-\").replace(/__/g, \"_\"))\n}\n\nexport function capitalize(value: string) {\n  return value.charAt(0).toUpperCase() + value.slice(1)\n}\n\nexport function dasherize(value: string) {\n  return value.replace(/([A-Z])/g, (_, char) => `-${char.toLowerCase()}`)\n}\n\nexport function tokenize(value: string) {\n  return value.match(/[^\\s]+/g) || []\n}\n","export function isSomething(object: any): boolean {\n  return object !== null && object !== undefined\n}\n\nexport function hasProperty(object: any, property: string): boolean {\n  return Object.prototype.hasOwnProperty.call(object, property)\n}\n","import { ActionDescriptor, parseActionDescriptorString, stringifyEventTarget } from \"./action_descriptor\"\nimport { Token } from \"../mutation-observers\"\nimport { Schema } from \"./schema\"\nimport { camelize } from \"./string_helpers\"\nimport { hasProperty } from \"./utils\"\n\nexport class Action {\n  readonly element: Element\n  readonly index: number\n  readonly eventTarget: EventTarget\n  readonly eventName: string\n  readonly eventOptions: AddEventListenerOptions\n  readonly identifier: string\n  readonly methodName: string\n  readonly keyFilter: string\n  readonly schema: Schema\n\n  static forToken(token: Token, schema: Schema) {\n    return new this(token.element, token.index, parseActionDescriptorString(token.content), schema)\n  }\n\n  constructor(element: Element, index: number, descriptor: Partial<ActionDescriptor>, schema: Schema) {\n    this.element = element\n    this.index = index\n    this.eventTarget = descriptor.eventTarget || element\n    this.eventName = descriptor.eventName || getDefaultEventNameForElement(element) || error(\"missing event name\")\n    this.eventOptions = descriptor.eventOptions || {}\n    this.identifier = descriptor.identifier || error(\"missing identifier\")\n    this.methodName = descriptor.methodName || error(\"missing method name\")\n    this.keyFilter = descriptor.keyFilter || \"\"\n    this.schema = schema\n  }\n\n  toString() {\n    const eventFilter = this.keyFilter ? `.${this.keyFilter}` : \"\"\n    const eventTarget = this.eventTargetName ? `@${this.eventTargetName}` : \"\"\n    return `${this.eventName}${eventFilter}${eventTarget}->${this.identifier}#${this.methodName}`\n  }\n\n  isFilterTarget(event: KeyboardEvent): boolean {\n    if (!this.keyFilter) {\n      return false\n    }\n\n    const filteres = this.keyFilter.split(\"+\")\n    const modifiers = [\"meta\", \"ctrl\", \"alt\", \"shift\"]\n    const [meta, ctrl, alt, shift] = modifiers.map((modifier) => filteres.includes(modifier))\n\n    if (event.metaKey !== meta || event.ctrlKey !== ctrl || event.altKey !== alt || event.shiftKey !== shift) {\n      return true\n    }\n\n    const standardFilter = filteres.filter((key) => !modifiers.includes(key))[0]\n    if (!standardFilter) {\n      // missing non modifier key\n      return false\n    }\n\n    if (!hasProperty(this.keyMappings, standardFilter)) {\n      error(`contains unknown key filter: ${this.keyFilter}`)\n    }\n\n    return this.keyMappings[standardFilter].toLowerCase() !== event.key.toLowerCase()\n  }\n\n  get params() {\n    const params: { [key: string]: any } = {}\n    const pattern = new RegExp(`^data-${this.identifier}-(.+)-param$`, \"i\")\n\n    for (const { name, value } of Array.from(this.element.attributes)) {\n      const match = name.match(pattern)\n      const key = match && match[1]\n      if (key) {\n        params[camelize(key)] = typecast(value)\n      }\n    }\n    return params\n  }\n\n  private get eventTargetName() {\n    return stringifyEventTarget(this.eventTarget)\n  }\n\n  private get keyMappings() {\n    return this.schema.keyMappings\n  }\n}\n\nconst defaultEventNames: { [tagName: string]: (element: Element) => string } = {\n  a: () => \"click\",\n  button: () => \"click\",\n  form: () => \"submit\",\n  details: () => \"toggle\",\n  input: (e) => (e.getAttribute(\"type\") == \"submit\" ? \"click\" : \"input\"),\n  select: () => \"change\",\n  textarea: () => \"input\",\n}\n\nexport function getDefaultEventNameForElement(element: Element): string | undefined {\n  const tagName = element.tagName.toLowerCase()\n  if (tagName in defaultEventNames) {\n    return defaultEventNames[tagName](element)\n  }\n}\n\nfunction error(message: string): never {\n  throw new Error(message)\n}\n\nfunction typecast(value: any): any {\n  try {\n    return JSON.parse(value)\n  } catch (o_O) {\n    return value\n  }\n}\n","import { Action } from \"./action\"\nimport { ActionEvent } from \"./action_event\"\nimport { Context } from \"./context\"\nimport { Controller } from \"./controller\"\nimport { Scope } from \"./scope\"\nexport class Binding {\n  readonly context: Context\n  readonly action: Action\n\n  constructor(context: Context, action: Action) {\n    this.context = context\n    this.action = action\n  }\n\n  get index(): number {\n    return this.action.index\n  }\n\n  get eventTarget(): EventTarget {\n    return this.action.eventTarget\n  }\n\n  get eventOptions(): AddEventListenerOptions {\n    return this.action.eventOptions\n  }\n\n  get identifier(): string {\n    return this.context.identifier\n  }\n\n  handleEvent(event: Event) {\n    if (this.willBeInvokedByEvent(event) && this.applyEventModifiers(event)) {\n      this.invokeWithEvent(event)\n    }\n  }\n\n  get eventName(): string {\n    return this.action.eventName\n  }\n\n  get method(): Function {\n    const method = (this.controller as any)[this.methodName]\n    if (typeof method == \"function\") {\n      return method\n    }\n    throw new Error(`Action \"${this.action}\" references undefined method \"${this.methodName}\"`)\n  }\n\n  private applyEventModifiers(event: Event): boolean {\n    const { element } = this.action\n    const { actionDescriptorFilters } = this.context.application\n\n    let passes = true\n\n    for (const [name, value] of Object.entries(this.eventOptions)) {\n      if (name in actionDescriptorFilters) {\n        const filter = actionDescriptorFilters[name]\n\n        passes = passes && filter({ name, value, event, element })\n      } else {\n        continue\n      }\n    }\n\n    return passes\n  }\n\n  private invokeWithEvent(event: Event) {\n    const { target, currentTarget } = event\n    try {\n      const { params } = this.action\n      const actionEvent: ActionEvent = Object.assign(event, { params })\n      this.method.call(this.controller, actionEvent)\n      this.context.logDebugActivity(this.methodName, { event, target, currentTarget, action: this.methodName })\n    } catch (error: any) {\n      const { identifier, controller, element, index } = this\n      const detail = { identifier, controller, element, index, event }\n      this.context.handleError(error, `invoking action \"${this.action}\"`, detail)\n    }\n  }\n\n  private willBeInvokedByEvent(event: Event): boolean {\n    const eventTarget = event.target\n\n    if (event instanceof KeyboardEvent && this.action.isFilterTarget(event)) {\n      return false\n    }\n\n    if (this.element === eventTarget) {\n      return true\n    } else if (eventTarget instanceof Element && this.element.contains(eventTarget)) {\n      return this.scope.containsElement(eventTarget)\n    } else {\n      return this.scope.containsElement(this.action.element)\n    }\n  }\n\n  private get controller(): Controller {\n    return this.context.controller\n  }\n\n  private get methodName(): string {\n    return this.action.methodName\n  }\n\n  private get element(): Element {\n    return this.scope.element\n  }\n\n  private get scope(): Scope {\n    return this.context.scope\n  }\n}\n","export interface ElementObserverDelegate {\n  matchElement(element: Element): boolean\n  matchElementsInTree(tree: Element): Element[]\n\n  elementMatched?(element: Element): void\n  elementUnmatched?(element: Element): void\n  elementAttributeChanged?(element: Element, attributeName: string): void\n}\n\nexport class ElementObserver {\n  element: Element\n  started: boolean\n  private delegate: ElementObserverDelegate\n\n  private elements: Set<Element>\n  private mutationObserver: MutationObserver\n  private mutationObserverInit: MutationObserverInit = { attributes: true, childList: true, subtree: true }\n\n  constructor(element: Element, delegate: ElementObserverDelegate) {\n    this.element = element\n    this.started = false\n    this.delegate = delegate\n\n    this.elements = new Set()\n    this.mutationObserver = new MutationObserver((mutations) => this.processMutations(mutations))\n  }\n\n  start() {\n    if (!this.started) {\n      this.started = true\n      this.mutationObserver.observe(this.element, this.mutationObserverInit)\n      this.refresh()\n    }\n  }\n\n  pause(callback: () => void) {\n    if (this.started) {\n      this.mutationObserver.disconnect()\n      this.started = false\n    }\n\n    callback()\n\n    if (!this.started) {\n      this.mutationObserver.observe(this.element, this.mutationObserverInit)\n      this.started = true\n    }\n  }\n\n  stop() {\n    if (this.started) {\n      this.mutationObserver.takeRecords()\n      this.mutationObserver.disconnect()\n      this.started = false\n    }\n  }\n\n  refresh() {\n    if (this.started) {\n      const matches = new Set(this.matchElementsInTree())\n\n      for (const element of Array.from(this.elements)) {\n        if (!matches.has(element)) {\n          this.removeElement(element)\n        }\n      }\n\n      for (const element of Array.from(matches)) {\n        this.addElement(element)\n      }\n    }\n  }\n\n  // Mutation record processing\n\n  private processMutations(mutations: MutationRecord[]) {\n    if (this.started) {\n      for (const mutation of mutations) {\n        this.processMutation(mutation)\n      }\n    }\n  }\n\n  private processMutation(mutation: MutationRecord) {\n    if (mutation.type == \"attributes\") {\n      this.processAttributeChange(mutation.target as Element, mutation.attributeName!)\n    } else if (mutation.type == \"childList\") {\n      this.processRemovedNodes(mutation.removedNodes)\n      this.processAddedNodes(mutation.addedNodes)\n    }\n  }\n\n  private processAttributeChange(element: Element, attributeName: string) {\n    if (this.elements.has(element)) {\n      if (this.delegate.elementAttributeChanged && this.matchElement(element)) {\n        this.delegate.elementAttributeChanged(element, attributeName)\n      } else {\n        this.removeElement(element)\n      }\n    } else if (this.matchElement(element)) {\n      this.addElement(element)\n    }\n  }\n\n  private processRemovedNodes(nodes: NodeList) {\n    for (const node of Array.from(nodes)) {\n      const element = this.elementFromNode(node)\n      if (element) {\n        this.processTree(element, this.removeElement)\n      }\n    }\n  }\n\n  private processAddedNodes(nodes: NodeList) {\n    for (const node of Array.from(nodes)) {\n      const element = this.elementFromNode(node)\n      if (element && this.elementIsActive(element)) {\n        this.processTree(element, this.addElement)\n      }\n    }\n  }\n\n  // Element matching\n\n  private matchElement(element: Element): boolean {\n    return this.delegate.matchElement(element)\n  }\n\n  private matchElementsInTree(tree: Element = this.element): Element[] {\n    return this.delegate.matchElementsInTree(tree)\n  }\n\n  private processTree(tree: Element, processor: (element: Element) => void) {\n    for (const element of this.matchElementsInTree(tree)) {\n      processor.call(this, element)\n    }\n  }\n\n  private elementFromNode(node: Node): Element | undefined {\n    if (node.nodeType == Node.ELEMENT_NODE) {\n      return node as Element\n    }\n  }\n\n  private elementIsActive(element: Element): boolean {\n    if (element.isConnected != this.element.isConnected) {\n      return false\n    } else {\n      return this.element.contains(element)\n    }\n  }\n\n  // Element tracking\n\n  private addElement(element: Element) {\n    if (!this.elements.has(element)) {\n      if (this.elementIsActive(element)) {\n        this.elements.add(element)\n        if (this.delegate.elementMatched) {\n          this.delegate.elementMatched(element)\n        }\n      }\n    }\n  }\n\n  private removeElement(element: Element) {\n    if (this.elements.has(element)) {\n      this.elements.delete(element)\n      if (this.delegate.elementUnmatched) {\n        this.delegate.elementUnmatched(element)\n      }\n    }\n  }\n}\n","import { ElementObserver, ElementObserverDelegate } from \"./element_observer\"\n\nexport interface AttributeObserverDelegate {\n  elementMatchedAttribute?(element: Element, attributeName: string): void\n  elementAttributeValueChanged?(element: Element, attributeName: string): void\n  elementUnmatchedAttribute?(element: Element, attributeName: string): void\n}\n\nexport class AttributeObserver implements ElementObserverDelegate {\n  attributeName: string\n  private delegate: AttributeObserverDelegate\n\n  private elementObserver: ElementObserver\n\n  constructor(element: Element, attributeName: string, delegate: AttributeObserverDelegate) {\n    this.attributeName = attributeName\n    this.delegate = delegate\n\n    this.elementObserver = new ElementObserver(element, this)\n  }\n\n  get element(): Element {\n    return this.elementObserver.element\n  }\n\n  get selector(): string {\n    return `[${this.attributeName}]`\n  }\n\n  start() {\n    this.elementObserver.start()\n  }\n\n  pause(callback: () => void) {\n    this.elementObserver.pause(callback)\n  }\n\n  stop() {\n    this.elementObserver.stop()\n  }\n\n  refresh() {\n    this.elementObserver.refresh()\n  }\n\n  get started(): boolean {\n    return this.elementObserver.started\n  }\n\n  // Element observer delegate\n\n  matchElement(element: Element): boolean {\n    return element.hasAttribute(this.attributeName)\n  }\n\n  matchElementsInTree(tree: Element): Element[] {\n    const match = this.matchElement(tree) ? [tree] : []\n    const matches = Array.from(tree.querySelectorAll(this.selector))\n    return match.concat(matches)\n  }\n\n  elementMatched(element: Element) {\n    if (this.delegate.elementMatchedAttribute) {\n      this.delegate.elementMatchedAttribute(element, this.attributeName)\n    }\n  }\n\n  elementUnmatched(element: Element) {\n    if (this.delegate.elementUnmatchedAttribute) {\n      this.delegate.elementUnmatchedAttribute(element, this.attributeName)\n    }\n  }\n\n  elementAttributeChanged(element: Element, attributeName: string) {\n    if (this.delegate.elementAttributeValueChanged && this.attributeName == attributeName) {\n      this.delegate.elementAttributeValueChanged(element, attributeName)\n    }\n  }\n}\n","export function add<K, V>(map: Map<K, Set<V>>, key: K, value: V) {\n  fetch(map, key).add(value)\n}\n\nexport function del<K, V>(map: Map<K, Set<V>>, key: K, value: V) {\n  fetch(map, key).delete(value)\n  prune(map, key)\n}\n\nexport function fetch<K, V>(map: Map<K, Set<V>>, key: K): Set<V> {\n  let values = map.get(key)\n  if (!values) {\n    values = new Set()\n    map.set(key, values)\n  }\n  return values\n}\n\nexport function prune<K, V>(map: Map<K, Set<V>>, key: K) {\n  const values = map.get(key)\n  if (values != null && values.size == 0) {\n    map.delete(key)\n  }\n}\n","import { add, del } from \"./set_operations\"\n\nexport class Multimap<K, V> {\n  private valuesByKey: Map<K, Set<V>>\n\n  constructor() {\n    this.valuesByKey = new Map<K, Set<V>>()\n  }\n\n  get keys() {\n    return Array.from(this.valuesByKey.keys())\n  }\n\n  get values(): V[] {\n    const sets = Array.from(this.valuesByKey.values())\n    return sets.reduce((values, set) => values.concat(Array.from(set)), <V[]>[])\n  }\n\n  get size(): number {\n    const sets = Array.from(this.valuesByKey.values())\n    return sets.reduce((size, set) => size + set.size, 0)\n  }\n\n  add(key: K, value: V) {\n    add(this.valuesByKey, key, value)\n  }\n\n  delete(key: K, value: V) {\n    del(this.valuesByKey, key, value)\n  }\n\n  has(key: K, value: V): boolean {\n    const values = this.valuesByKey.get(key)\n    return values != null && values.has(value)\n  }\n\n  hasKey(key: K): boolean {\n    return this.valuesByKey.has(key)\n  }\n\n  hasValue(value: V): boolean {\n    const sets = Array.from(this.valuesByKey.values())\n    return sets.some((set) => set.has(value))\n  }\n\n  getValuesForKey(key: K): V[] {\n    const values = this.valuesByKey.get(key)\n    return values ? Array.from(values) : []\n  }\n\n  getKeysForValue(value: V): K[] {\n    return Array.from(this.valuesByKey)\n      .filter(([_key, values]) => values.has(value))\n      .map(([key, _values]) => key)\n  }\n}\n","import { Multimap } from \"./multimap\"\nimport { add, del } from \"./set_operations\"\n\nexport class IndexedMultimap<K, V> extends Multimap<K, V> {\n  private keysByValue: Map<V, Set<K>>\n\n  constructor() {\n    super()\n    this.keysByValue = new Map()\n  }\n\n  get values(): V[] {\n    return Array.from(this.keysByValue.keys())\n  }\n\n  add(key: K, value: V) {\n    super.add(key, value)\n    add(this.keysByValue, value, key)\n  }\n\n  delete(key: K, value: V) {\n    super.delete(key, value)\n    del(this.keysByValue, value, key)\n  }\n\n  hasValue(value: V): boolean {\n    return this.keysByValue.has(value)\n  }\n\n  getKeysForValue(value: V): K[] {\n    const set = this.keysByValue.get(value)\n    return set ? Array.from(set) : []\n  }\n}\n","import { ElementObserver, ElementObserverDelegate } from \"./element_observer\"\nimport { Multimap } from \"../multimap\"\n\nexport interface SelectorObserverDelegate {\n  selectorMatched(element: Element, selector: string, details: object): void\n  selectorUnmatched(element: Element, selector: string, details: object): void\n  selectorMatchElement?(element: Element, details: object): boolean\n}\n\nexport class SelectorObserver implements ElementObserverDelegate {\n  private readonly elementObserver: ElementObserver\n  private readonly delegate: SelectorObserverDelegate\n  private readonly matchesByElement: Multimap<string, Element>\n  private readonly details: object\n  _selector: string | null\n\n  constructor(element: Element, selector: string, delegate: SelectorObserverDelegate, details: object) {\n    this._selector = selector\n    this.details = details\n    this.elementObserver = new ElementObserver(element, this)\n    this.delegate = delegate\n    this.matchesByElement = new Multimap()\n  }\n\n  get started(): boolean {\n    return this.elementObserver.started\n  }\n\n  get selector() {\n    return this._selector\n  }\n\n  set selector(selector: string | null) {\n    this._selector = selector\n    this.refresh()\n  }\n\n  start() {\n    this.elementObserver.start()\n  }\n\n  pause(callback: () => void) {\n    this.elementObserver.pause(callback)\n  }\n\n  stop() {\n    this.elementObserver.stop()\n  }\n\n  refresh() {\n    this.elementObserver.refresh()\n  }\n\n  get element(): Element {\n    return this.elementObserver.element\n  }\n\n  // Element observer delegate\n\n  matchElement(element: Element): boolean {\n    const { selector } = this\n\n    if (selector) {\n      const matches = element.matches(selector)\n\n      if (this.delegate.selectorMatchElement) {\n        return matches && this.delegate.selectorMatchElement(element, this.details)\n      }\n\n      return matches\n    } else {\n      return false\n    }\n  }\n\n  matchElementsInTree(tree: Element): Element[] {\n    const { selector } = this\n\n    if (selector) {\n      const match = this.matchElement(tree) ? [tree] : []\n      const matches = Array.from(tree.querySelectorAll(selector)).filter((match) => this.matchElement(match))\n      return match.concat(matches)\n    } else {\n      return []\n    }\n  }\n\n  elementMatched(element: Element) {\n    const { selector } = this\n\n    if (selector) {\n      this.selectorMatched(element, selector)\n    }\n  }\n\n  elementUnmatched(element: Element) {\n    const selectors = this.matchesByElement.getKeysForValue(element)\n\n    for (const selector of selectors) {\n      this.selectorUnmatched(element, selector)\n    }\n  }\n\n  elementAttributeChanged(element: Element, _attributeName: string) {\n    const { selector } = this\n\n    if (selector) {\n      const matches = this.matchElement(element)\n      const matchedBefore = this.matchesByElement.has(selector, element)\n\n      if (matches && !matchedBefore) {\n        this.selectorMatched(element, selector)\n      } else if (!matches && matchedBefore) {\n        this.selectorUnmatched(element, selector)\n      }\n    }\n  }\n\n  // Selector management\n\n  private selectorMatched(element: Element, selector: string) {\n    this.delegate.selectorMatched(element, selector, this.details)\n    this.matchesByElement.add(selector, element)\n  }\n\n  private selectorUnmatched(element: Element, selector: string) {\n    this.delegate.selectorUnmatched(element, selector, this.details)\n    this.matchesByElement.delete(selector, element)\n  }\n}\n","export interface StringMapObserverDelegate {\n  getStringMapKeyForAttribute(attributeName: string): string | undefined\n  stringMapKeyAdded?(key: string, attributeName: string): void\n  stringMapValueChanged?(value: string | null, key: string, oldValue: string | null): void\n  stringMapKeyRemoved?(key: string, attributeName: string, oldValue: string | null): void\n}\n\nexport class StringMapObserver {\n  readonly element: Element\n  readonly delegate: StringMapObserverDelegate\n  private started: boolean\n  private stringMap: Map<string, string>\n  private mutationObserver: MutationObserver\n\n  constructor(element: Element, delegate: StringMapObserverDelegate) {\n    this.element = element\n    this.delegate = delegate\n    this.started = false\n    this.stringMap = new Map()\n    this.mutationObserver = new MutationObserver((mutations) => this.processMutations(mutations))\n  }\n\n  start() {\n    if (!this.started) {\n      this.started = true\n      this.mutationObserver.observe(this.element, { attributes: true, attributeOldValue: true })\n      this.refresh()\n    }\n  }\n\n  stop() {\n    if (this.started) {\n      this.mutationObserver.takeRecords()\n      this.mutationObserver.disconnect()\n      this.started = false\n    }\n  }\n\n  refresh() {\n    if (this.started) {\n      for (const attributeName of this.knownAttributeNames) {\n        this.refreshAttribute(attributeName, null)\n      }\n    }\n  }\n\n  // Mutation record processing\n\n  private processMutations(mutations: MutationRecord[]) {\n    if (this.started) {\n      for (const mutation of mutations) {\n        this.processMutation(mutation)\n      }\n    }\n  }\n\n  private processMutation(mutation: MutationRecord) {\n    const attributeName = mutation.attributeName\n    if (attributeName) {\n      this.refreshAttribute(attributeName, mutation.oldValue)\n    }\n  }\n\n  // State tracking\n\n  private refreshAttribute(attributeName: string, oldValue: string | null) {\n    const key = this.delegate.getStringMapKeyForAttribute(attributeName)\n    if (key != null) {\n      if (!this.stringMap.has(attributeName)) {\n        this.stringMapKeyAdded(key, attributeName)\n      }\n\n      const value = this.element.getAttribute(attributeName)\n      if (this.stringMap.get(attributeName) != value) {\n        this.stringMapValueChanged(value, key, oldValue)\n      }\n\n      if (value == null) {\n        const oldValue = this.stringMap.get(attributeName)\n        this.stringMap.delete(attributeName)\n        if (oldValue) this.stringMapKeyRemoved(key, attributeName, oldValue)\n      } else {\n        this.stringMap.set(attributeName, value)\n      }\n    }\n  }\n\n  private stringMapKeyAdded(key: string, attributeName: string) {\n    if (this.delegate.stringMapKeyAdded) {\n      this.delegate.stringMapKeyAdded(key, attributeName)\n    }\n  }\n\n  private stringMapValueChanged(value: string | null, key: string, oldValue: string | null) {\n    if (this.delegate.stringMapValueChanged) {\n      this.delegate.stringMapValueChanged(value, key, oldValue)\n    }\n  }\n\n  private stringMapKeyRemoved(key: string, attributeName: string, oldValue: string | null) {\n    if (this.delegate.stringMapKeyRemoved) {\n      this.delegate.stringMapKeyRemoved(key, attributeName, oldValue)\n    }\n  }\n\n  private get knownAttributeNames() {\n    return Array.from(new Set(this.currentAttributeNames.concat(this.recordedAttributeNames)))\n  }\n\n  private get currentAttributeNames() {\n    return Array.from(this.element.attributes).map((attribute) => attribute.name)\n  }\n\n  private get recordedAttributeNames() {\n    return Array.from(this.stringMap.keys())\n  }\n}\n","import { AttributeObserver, AttributeObserverDelegate } from \"./attribute_observer\"\nimport { Multimap } from \"../multimap\"\n\nexport interface Token {\n  element: Element\n  attributeName: string\n  index: number\n  content: string\n}\n\nexport interface TokenListObserverDelegate {\n  tokenMatched(token: Token): void\n  tokenUnmatched(token: Token): void\n}\n\nexport class TokenListObserver implements AttributeObserverDelegate {\n  private attributeObserver: AttributeObserver\n  private delegate: TokenListObserverDelegate\n  private tokensByElement: Multimap<Element, Token>\n\n  constructor(element: Element, attributeName: string, delegate: TokenListObserverDelegate) {\n    this.attributeObserver = new AttributeObserver(element, attributeName, this)\n    this.delegate = delegate\n    this.tokensByElement = new Multimap()\n  }\n\n  get started(): boolean {\n    return this.attributeObserver.started\n  }\n\n  start() {\n    this.attributeObserver.start()\n  }\n\n  pause(callback: () => void) {\n    this.attributeObserver.pause(callback)\n  }\n\n  stop() {\n    this.attributeObserver.stop()\n  }\n\n  refresh() {\n    this.attributeObserver.refresh()\n  }\n\n  get element(): Element {\n    return this.attributeObserver.element\n  }\n\n  get attributeName(): string {\n    return this.attributeObserver.attributeName\n  }\n\n  // Attribute observer delegate\n\n  elementMatchedAttribute(element: Element) {\n    this.tokensMatched(this.readTokensForElement(element))\n  }\n\n  elementAttributeValueChanged(element: Element) {\n    const [unmatchedTokens, matchedTokens] = this.refreshTokensForElement(element)\n    this.tokensUnmatched(unmatchedTokens)\n    this.tokensMatched(matchedTokens)\n  }\n\n  elementUnmatchedAttribute(element: Element) {\n    this.tokensUnmatched(this.tokensByElement.getValuesForKey(element))\n  }\n\n  private tokensMatched(tokens: Token[]) {\n    tokens.forEach((token) => this.tokenMatched(token))\n  }\n\n  private tokensUnmatched(tokens: Token[]) {\n    tokens.forEach((token) => this.tokenUnmatched(token))\n  }\n\n  private tokenMatched(token: Token) {\n    this.delegate.tokenMatched(token)\n    this.tokensByElement.add(token.element, token)\n  }\n\n  private tokenUnmatched(token: Token) {\n    this.delegate.tokenUnmatched(token)\n    this.tokensByElement.delete(token.element, token)\n  }\n\n  private refreshTokensForElement(element: Element): [Token[], Token[]] {\n    const previousTokens = this.tokensByElement.getValuesForKey(element)\n    const currentTokens = this.readTokensForElement(element)\n    const firstDifferingIndex = zip(previousTokens, currentTokens).findIndex(\n      ([previousToken, currentToken]) => !tokensAreEqual(previousToken, currentToken)\n    )\n\n    if (firstDifferingIndex == -1) {\n      return [[], []]\n    } else {\n      return [previousTokens.slice(firstDifferingIndex), currentTokens.slice(firstDifferingIndex)]\n    }\n  }\n\n  private readTokensForElement(element: Element): Token[] {\n    const attributeName = this.attributeName\n    const tokenString = element.getAttribute(attributeName) || \"\"\n    return parseTokenString(tokenString, element, attributeName)\n  }\n}\n\nfunction parseTokenString(tokenString: string, element: Element, attributeName: string): Token[] {\n  return tokenString\n    .trim()\n    .split(/\\s+/)\n    .filter((content) => content.length)\n    .map((content, index) => ({ element, attributeName, content, index }))\n}\n\nfunction zip<L, R>(left: L[], right: R[]): [L | undefined, R | undefined][] {\n  const length = Math.max(left.length, right.length)\n  return Array.from({ length }, (_, index) => [left[index], right[index]] as [L, R])\n}\n\nfunction tokensAreEqual(left?: Token, right?: Token) {\n  return left && right && left.index == right.index && left.content == right.content\n}\n","import { Token, TokenListObserver, TokenListObserverDelegate } from \"./token_list_observer\"\n\nexport interface ValueListObserverDelegate<T> {\n  parseValueForToken(token: Token): T | undefined\n  elementMatchedValue(element: Element, value: T): void\n  elementUnmatchedValue(element: Element, value: T): void\n}\n\ninterface ParseResult<T> {\n  value?: T\n  error?: Error\n}\n\nexport class ValueListObserver<T> implements TokenListObserverDelegate {\n  private tokenListObserver: TokenListObserver\n  private delegate: ValueListObserverDelegate<T>\n  private parseResultsByToken: WeakMap<Token, ParseResult<T>>\n  private valuesByTokenByElement: WeakMap<Element, Map<Token, T>>\n\n  constructor(element: Element, attributeName: string, delegate: ValueListObserverDelegate<T>) {\n    this.tokenListObserver = new TokenListObserver(element, attributeName, this)\n    this.delegate = delegate\n    this.parseResultsByToken = new WeakMap()\n    this.valuesByTokenByElement = new WeakMap()\n  }\n\n  get started(): boolean {\n    return this.tokenListObserver.started\n  }\n\n  start() {\n    this.tokenListObserver.start()\n  }\n\n  stop() {\n    this.tokenListObserver.stop()\n  }\n\n  refresh() {\n    this.tokenListObserver.refresh()\n  }\n\n  get element(): Element {\n    return this.tokenListObserver.element\n  }\n\n  get attributeName(): string {\n    return this.tokenListObserver.attributeName\n  }\n\n  tokenMatched(token: Token) {\n    const { element } = token\n    const { value } = this.fetchParseResultForToken(token)\n    if (value) {\n      this.fetchValuesByTokenForElement(element).set(token, value)\n      this.delegate.elementMatchedValue(element, value)\n    }\n  }\n\n  tokenUnmatched(token: Token) {\n    const { element } = token\n    const { value } = this.fetchParseResultForToken(token)\n    if (value) {\n      this.fetchValuesByTokenForElement(element).delete(token)\n      this.delegate.elementUnmatchedValue(element, value)\n    }\n  }\n\n  private fetchParseResultForToken(token: Token) {\n    let parseResult = this.parseResultsByToken.get(token)\n    if (!parseResult) {\n      parseResult = this.parseToken(token)\n      this.parseResultsByToken.set(token, parseResult)\n    }\n    return parseResult\n  }\n\n  private fetchValuesByTokenForElement(element: Element) {\n    let valuesByToken = this.valuesByTokenByElement.get(element)\n    if (!valuesByToken) {\n      valuesByToken = new Map()\n      this.valuesByTokenByElement.set(element, valuesByToken)\n    }\n    return valuesByToken\n  }\n\n  private parseToken(token: Token): ParseResult<T> {\n    try {\n      const value = this.delegate.parseValueForToken(token)\n      return { value }\n    } catch (error: any) {\n      return { error }\n    }\n  }\n}\n","import { Action } from \"./action\"\nimport { Binding } from \"./binding\"\nimport { Context } from \"./context\"\nimport { ErrorHandler } from \"./error_handler\"\nimport { Schema } from \"./schema\"\nimport { Token, ValueListObserver, ValueListObserverDelegate } from \"../mutation-observers\"\n\nexport interface BindingObserverDelegate extends ErrorHandler {\n  bindingConnected(binding: Binding): void\n  bindingDisconnected(binding: Binding, clearEventListeners?: boolean): void\n}\n\nexport class BindingObserver implements ValueListObserverDelegate<Action> {\n  readonly context: Context\n  private delegate: BindingObserverDelegate\n  private valueListObserver?: ValueListObserver<Action>\n  private bindingsByAction: Map<Action, Binding>\n\n  constructor(context: Context, delegate: BindingObserverDelegate) {\n    this.context = context\n    this.delegate = delegate\n    this.bindingsByAction = new Map()\n  }\n\n  start() {\n    if (!this.valueListObserver) {\n      this.valueListObserver = new ValueListObserver(this.element, this.actionAttribute, this)\n      this.valueListObserver.start()\n    }\n  }\n\n  stop() {\n    if (this.valueListObserver) {\n      this.valueListObserver.stop()\n      delete this.valueListObserver\n      this.disconnectAllActions()\n    }\n  }\n\n  get element() {\n    return this.context.element\n  }\n\n  get identifier() {\n    return this.context.identifier\n  }\n\n  get actionAttribute() {\n    return this.schema.actionAttribute\n  }\n\n  get schema(): Schema {\n    return this.context.schema\n  }\n\n  get bindings(): Binding[] {\n    return Array.from(this.bindingsByAction.values())\n  }\n\n  private connectAction(action: Action) {\n    const binding = new Binding(this.context, action)\n    this.bindingsByAction.set(action, binding)\n    this.delegate.bindingConnected(binding)\n  }\n\n  private disconnectAction(action: Action) {\n    const binding = this.bindingsByAction.get(action)\n    if (binding) {\n      this.bindingsByAction.delete(action)\n      this.delegate.bindingDisconnected(binding)\n    }\n  }\n\n  private disconnectAllActions() {\n    this.bindings.forEach((binding) => this.delegate.bindingDisconnected(binding, true))\n    this.bindingsByAction.clear()\n  }\n\n  // Value observer delegate\n\n  parseValueForToken(token: Token): Action | undefined {\n    const action = Action.forToken(token, this.schema)\n    if (action.identifier == this.identifier) {\n      return action\n    }\n  }\n\n  elementMatchedValue(element: Element, action: Action) {\n    this.connectAction(action)\n  }\n\n  elementUnmatchedValue(element: Element, action: Action) {\n    this.disconnectAction(action)\n  }\n}\n","import { Context } from \"./context\"\nimport { StringMapObserver, StringMapObserverDelegate } from \"../mutation-observers\"\nimport { ValueDescriptor } from \"./value_properties\"\nimport { capitalize } from \"./string_helpers\"\n\nexport class ValueObserver implements StringMapObserverDelegate {\n  readonly context: Context\n  readonly receiver: any\n  private stringMapObserver: StringMapObserver\n  private valueDescriptorMap: { [attributeName: string]: ValueDescriptor }\n\n  constructor(context: Context, receiver: any) {\n    this.context = context\n    this.receiver = receiver\n    this.stringMapObserver = new StringMapObserver(this.element, this)\n    this.valueDescriptorMap = (this.controller as any).valueDescriptorMap\n  }\n\n  start() {\n    this.stringMapObserver.start()\n    this.invokeChangedCallbacksForDefaultValues()\n  }\n\n  stop() {\n    this.stringMapObserver.stop()\n  }\n\n  get element() {\n    return this.context.element\n  }\n\n  get controller() {\n    return this.context.controller\n  }\n\n  // String map observer delegate\n\n  getStringMapKeyForAttribute(attributeName: string) {\n    if (attributeName in this.valueDescriptorMap) {\n      return this.valueDescriptorMap[attributeName].name\n    }\n  }\n\n  stringMapKeyAdded(key: string, attributeName: string) {\n    const descriptor = this.valueDescriptorMap[attributeName]\n\n    if (!this.hasValue(key)) {\n      this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), descriptor.writer(descriptor.defaultValue))\n    }\n  }\n\n  stringMapValueChanged(value: string, name: string, oldValue: string) {\n    const descriptor = this.valueDescriptorNameMap[name]\n\n    if (value === null) return\n\n    if (oldValue === null) {\n      oldValue = descriptor.writer(descriptor.defaultValue)\n    }\n\n    this.invokeChangedCallback(name, value, oldValue)\n  }\n\n  stringMapKeyRemoved(key: string, attributeName: string, oldValue: string) {\n    const descriptor = this.valueDescriptorNameMap[key]\n\n    if (this.hasValue(key)) {\n      this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), oldValue)\n    } else {\n      this.invokeChangedCallback(key, descriptor.writer(descriptor.defaultValue), oldValue)\n    }\n  }\n\n  private invokeChangedCallbacksForDefaultValues() {\n    for (const { key, name, defaultValue, writer } of this.valueDescriptors) {\n      if (defaultValue != undefined && !this.controller.data.has(key)) {\n        this.invokeChangedCallback(name, writer(defaultValue), undefined)\n      }\n    }\n  }\n\n  private invokeChangedCallback(name: string, rawValue: string, rawOldValue: string | undefined) {\n    const changedMethodName = `${name}Changed`\n    const changedMethod = this.receiver[changedMethodName]\n\n    if (typeof changedMethod == \"function\") {\n      const descriptor = this.valueDescriptorNameMap[name]\n\n      try {\n        const value = descriptor.reader(rawValue)\n        let oldValue = rawOldValue\n\n        if (rawOldValue) {\n          oldValue = descriptor.reader(rawOldValue)\n        }\n\n        changedMethod.call(this.receiver, value, oldValue)\n      } catch (error) {\n        if (error instanceof TypeError) {\n          error.message = `Stimulus Value \"${this.context.identifier}.${descriptor.name}\" - ${error.message}`\n        }\n\n        throw error\n      }\n    }\n  }\n\n  private get valueDescriptors() {\n    const { valueDescriptorMap } = this\n    return Object.keys(valueDescriptorMap).map((key) => valueDescriptorMap[key])\n  }\n\n  private get valueDescriptorNameMap() {\n    const descriptors: { [type: string]: ValueDescriptor } = {}\n\n    Object.keys(this.valueDescriptorMap).forEach((key) => {\n      const descriptor = this.valueDescriptorMap[key]\n      descriptors[descriptor.name] = descriptor\n    })\n\n    return descriptors\n  }\n\n  private hasValue(attributeName: string) {\n    const descriptor = this.valueDescriptorNameMap[attributeName]\n    const hasMethodName = `has${capitalize(descriptor.name)}`\n\n    return this.receiver[hasMethodName]\n  }\n}\n","import { Multimap } from \"../multimap\"\nimport { Token, TokenListObserver, TokenListObserverDelegate } from \"../mutation-observers\"\nimport { Context } from \"./context\"\n\nexport interface TargetObserverDelegate {\n  targetConnected(element: Element, name: string): void\n  targetDisconnected(element: Element, name: string): void\n}\n\nexport class TargetObserver implements TokenListObserverDelegate {\n  readonly context: Context\n  readonly delegate: TargetObserverDelegate\n  readonly targetsByName: Multimap<string, Element>\n  private tokenListObserver?: TokenListObserver\n\n  constructor(context: Context, delegate: TargetObserverDelegate) {\n    this.context = context\n    this.delegate = delegate\n    this.targetsByName = new Multimap()\n  }\n\n  start() {\n    if (!this.tokenListObserver) {\n      this.tokenListObserver = new TokenListObserver(this.element, this.attributeName, this)\n      this.tokenListObserver.start()\n    }\n  }\n\n  stop() {\n    if (this.tokenListObserver) {\n      this.disconnectAllTargets()\n      this.tokenListObserver.stop()\n      delete this.tokenListObserver\n    }\n  }\n\n  // Token list observer delegate\n\n  tokenMatched({ element, content: name }: Token) {\n    if (this.scope.containsElement(element)) {\n      this.connectTarget(element, name)\n    }\n  }\n\n  tokenUnmatched({ element, content: name }: Token) {\n    this.disconnectTarget(element, name)\n  }\n\n  // Target management\n\n  connectTarget(element: Element, name: string) {\n    if (!this.targetsByName.has(name, element)) {\n      this.targetsByName.add(name, element)\n      this.tokenListObserver?.pause(() => this.delegate.targetConnected(element, name))\n    }\n  }\n\n  disconnectTarget(element: Element, name: string) {\n    if (this.targetsByName.has(name, element)) {\n      this.targetsByName.delete(name, element)\n      this.tokenListObserver?.pause(() => this.delegate.targetDisconnected(element, name))\n    }\n  }\n\n  disconnectAllTargets() {\n    for (const name of this.targetsByName.keys) {\n      for (const element of this.targetsByName.getValuesForKey(name)) {\n        this.disconnectTarget(element, name)\n      }\n    }\n  }\n\n  // Private\n\n  private get attributeName() {\n    return `data-${this.context.identifier}-target`\n  }\n\n  private get element() {\n    return this.context.element\n  }\n\n  private get scope() {\n    return this.context.scope\n  }\n}\n","import { Constructor } from \"./constructor\"\n\nexport function readInheritableStaticArrayValues<T, U = string>(constructor: Constructor<T>, propertyName: string) {\n  const ancestors = getAncestorsForConstructor(constructor)\n  return Array.from(\n    ancestors.reduce((values, constructor) => {\n      getOwnStaticArrayValues(constructor, propertyName).forEach((name) => values.add(name))\n      return values\n    }, new Set() as Set<U>)\n  )\n}\n\nexport function readInheritableStaticObjectPairs<T, U>(constructor: Constructor<T>, propertyName: string) {\n  const ancestors = getAncestorsForConstructor(constructor)\n  return ancestors.reduce((pairs, constructor) => {\n    pairs.push(...(getOwnStaticObjectPairs(constructor, propertyName) as any))\n    return pairs\n  }, [] as [string, U][])\n}\n\nfunction getAncestorsForConstructor<T>(constructor: Constructor<T>) {\n  const ancestors: Constructor<any>[] = []\n  while (constructor) {\n    ancestors.push(constructor)\n    constructor = Object.getPrototypeOf(constructor)\n  }\n  return ancestors.reverse()\n}\n\nfunction getOwnStaticArrayValues<T>(constructor: Constructor<T>, propertyName: string) {\n  const definition = (constructor as any)[propertyName]\n  return Array.isArray(definition) ? definition : []\n}\n\nfunction getOwnStaticObjectPairs<T, U>(constructor: Constructor<T>, propertyName: string) {\n  const definition = (constructor as any)[propertyName]\n  return definition ? Object.keys(definition).map((key) => [key, definition[key]] as [string, U]) : []\n}\n","import { Multimap } from \"../multimap\"\nimport { AttributeObserver, AttributeObserverDelegate } from \"../mutation-observers\"\nimport { SelectorObserver, SelectorObserverDelegate } from \"../mutation-observers\"\nimport { Context } from \"./context\"\nimport { Controller } from \"./controller\"\n\nimport { readInheritableStaticArrayValues } from \"./inheritable_statics\"\n\ntype OutletObserverDetails = { outletName: string }\n\nexport interface OutletObserverDelegate {\n  outletConnected(outlet: Controller, element: Element, outletName: string): void\n  outletDisconnected(outlet: Controller, element: Element, outletName: string): void\n}\n\nexport class OutletObserver implements AttributeObserverDelegate, SelectorObserverDelegate {\n  started: boolean\n  readonly context: Context\n  readonly delegate: OutletObserverDelegate\n  readonly outletsByName: Multimap<string, Controller>\n  readonly outletElementsByName: Multimap<string, Element>\n  private selectorObserverMap: Map<string, SelectorObserver>\n  private attributeObserverMap: Map<string, AttributeObserver>\n\n  constructor(context: Context, delegate: OutletObserverDelegate) {\n    this.started = false\n    this.context = context\n    this.delegate = delegate\n    this.outletsByName = new Multimap()\n    this.outletElementsByName = new Multimap()\n    this.selectorObserverMap = new Map()\n    this.attributeObserverMap = new Map()\n  }\n\n  start() {\n    if (!this.started) {\n      this.outletDefinitions.forEach((outletName) => {\n        this.setupSelectorObserverForOutlet(outletName)\n        this.setupAttributeObserverForOutlet(outletName)\n      })\n      this.started = true\n      this.dependentContexts.forEach((context) => context.refresh())\n    }\n  }\n\n  refresh() {\n    this.selectorObserverMap.forEach((observer) => observer.refresh())\n    this.attributeObserverMap.forEach((observer) => observer.refresh())\n  }\n\n  stop() {\n    if (this.started) {\n      this.started = false\n      this.disconnectAllOutlets()\n      this.stopSelectorObservers()\n      this.stopAttributeObservers()\n    }\n  }\n\n  stopSelectorObservers() {\n    if (this.selectorObserverMap.size > 0) {\n      this.selectorObserverMap.forEach((observer) => observer.stop())\n      this.selectorObserverMap.clear()\n    }\n  }\n\n  stopAttributeObservers() {\n    if (this.attributeObserverMap.size > 0) {\n      this.attributeObserverMap.forEach((observer) => observer.stop())\n      this.attributeObserverMap.clear()\n    }\n  }\n\n  // Selector observer delegate\n\n  selectorMatched(element: Element, _selector: string, { outletName }: OutletObserverDetails) {\n    const outlet = this.getOutlet(element, outletName)\n\n    if (outlet) {\n      this.connectOutlet(outlet, element, outletName)\n    }\n  }\n\n  selectorUnmatched(element: Element, _selector: string, { outletName }: OutletObserverDetails) {\n    const outlet = this.getOutletFromMap(element, outletName)\n\n    if (outlet) {\n      this.disconnectOutlet(outlet, element, outletName)\n    }\n  }\n\n  selectorMatchElement(element: Element, { outletName }: OutletObserverDetails) {\n    const selector = this.selector(outletName)\n    const hasOutlet = this.hasOutlet(element, outletName)\n    const hasOutletController = element.matches(`[${this.schema.controllerAttribute}~=${outletName}]`)\n\n    if (selector) {\n      return hasOutlet && hasOutletController && element.matches(selector)\n    } else {\n      return false\n    }\n  }\n\n  // Attribute observer delegate\n\n  elementMatchedAttribute(_element: Element, attributeName: string) {\n    const outletName = this.getOutletNameFromOutletAttributeName(attributeName)\n\n    if (outletName) {\n      this.updateSelectorObserverForOutlet(outletName)\n    }\n  }\n\n  elementAttributeValueChanged(_element: Element, attributeName: string) {\n    const outletName = this.getOutletNameFromOutletAttributeName(attributeName)\n\n    if (outletName) {\n      this.updateSelectorObserverForOutlet(outletName)\n    }\n  }\n\n  elementUnmatchedAttribute(_element: Element, attributeName: string) {\n    const outletName = this.getOutletNameFromOutletAttributeName(attributeName)\n\n    if (outletName) {\n      this.updateSelectorObserverForOutlet(outletName)\n    }\n  }\n\n  // Outlet management\n\n  connectOutlet(outlet: Controller, element: Element, outletName: string) {\n    if (!this.outletElementsByName.has(outletName, element)) {\n      this.outletsByName.add(outletName, outlet)\n      this.outletElementsByName.add(outletName, element)\n      this.selectorObserverMap.get(outletName)?.pause(() => this.delegate.outletConnected(outlet, element, outletName))\n    }\n  }\n\n  disconnectOutlet(outlet: Controller, element: Element, outletName: string) {\n    if (this.outletElementsByName.has(outletName, element)) {\n      this.outletsByName.delete(outletName, outlet)\n      this.outletElementsByName.delete(outletName, element)\n      this.selectorObserverMap\n        .get(outletName)\n        ?.pause(() => this.delegate.outletDisconnected(outlet, element, outletName))\n    }\n  }\n\n  disconnectAllOutlets() {\n    for (const outletName of this.outletElementsByName.keys) {\n      for (const element of this.outletElementsByName.getValuesForKey(outletName)) {\n        for (const outlet of this.outletsByName.getValuesForKey(outletName)) {\n          this.disconnectOutlet(outlet, element, outletName)\n        }\n      }\n    }\n  }\n\n  // Observer management\n\n  private updateSelectorObserverForOutlet(outletName: string) {\n    const observer = this.selectorObserverMap.get(outletName)\n\n    if (observer) {\n      observer.selector = this.selector(outletName)\n    }\n  }\n\n  private setupSelectorObserverForOutlet(outletName: string) {\n    const selector = this.selector(outletName)\n    const selectorObserver = new SelectorObserver(document.body, selector!, this, { outletName })\n\n    this.selectorObserverMap.set(outletName, selectorObserver)\n\n    selectorObserver.start()\n  }\n\n  private setupAttributeObserverForOutlet(outletName: string) {\n    const attributeName = this.attributeNameForOutletName(outletName)\n    const attributeObserver = new AttributeObserver(this.scope.element, attributeName, this)\n\n    this.attributeObserverMap.set(outletName, attributeObserver)\n\n    attributeObserver.start()\n  }\n\n  // Private\n\n  private selector(outletName: string) {\n    return this.scope.outlets.getSelectorForOutletName(outletName)\n  }\n\n  private attributeNameForOutletName(outletName: string) {\n    return this.scope.schema.outletAttributeForScope(this.identifier, outletName)\n  }\n\n  private getOutletNameFromOutletAttributeName(attributeName: string) {\n    return this.outletDefinitions.find((outletName) => this.attributeNameForOutletName(outletName) === attributeName)\n  }\n\n  private get outletDependencies() {\n    const dependencies = new Multimap<string, string>()\n\n    this.router.modules.forEach((module) => {\n      const constructor = module.definition.controllerConstructor\n      const outlets = readInheritableStaticArrayValues(constructor, \"outlets\")\n\n      outlets.forEach((outlet) => dependencies.add(outlet, module.identifier))\n    })\n\n    return dependencies\n  }\n\n  private get outletDefinitions() {\n    return this.outletDependencies.getKeysForValue(this.identifier)\n  }\n\n  private get dependentControllerIdentifiers() {\n    return this.outletDependencies.getValuesForKey(this.identifier)\n  }\n\n  private get dependentContexts() {\n    const identifiers = this.dependentControllerIdentifiers\n    return this.router.contexts.filter((context) => identifiers.includes(context.identifier))\n  }\n\n  private hasOutlet(element: Element, outletName: string) {\n    return !!this.getOutlet(element, outletName) || !!this.getOutletFromMap(element, outletName)\n  }\n\n  private getOutlet(element: Element, outletName: string) {\n    return this.application.getControllerForElementAndIdentifier(element, outletName)\n  }\n\n  private getOutletFromMap(element: Element, outletName: string) {\n    return this.outletsByName.getValuesForKey(outletName).find((outlet) => outlet.element === element)\n  }\n\n  private get scope() {\n    return this.context.scope\n  }\n\n  private get schema() {\n    return this.context.schema\n  }\n\n  private get identifier() {\n    return this.context.identifier\n  }\n\n  private get application() {\n    return this.context.application\n  }\n\n  private get router() {\n    return this.application.router\n  }\n}\n","import { Application } from \"./application\"\nimport { BindingObserver } from \"./binding_observer\"\nimport { Controller } from \"./controller\"\nimport { Dispatcher } from \"./dispatcher\"\nimport { ErrorHandler } from \"./error_handler\"\nimport { Module } from \"./module\"\nimport { Schema } from \"./schema\"\nimport { Scope } from \"./scope\"\nimport { ValueObserver } from \"./value_observer\"\nimport { TargetObserver, TargetObserverDelegate } from \"./target_observer\"\nimport { OutletObserver, OutletObserverDelegate } from \"./outlet_observer\"\nimport { namespaceCamelize } from \"./string_helpers\"\n\nexport class Context implements ErrorHandler, TargetObserverDelegate, OutletObserverDelegate {\n  readonly module: Module\n  readonly scope: Scope\n  readonly controller: Controller\n  private bindingObserver: BindingObserver\n  private valueObserver: ValueObserver\n  private targetObserver: TargetObserver\n  private outletObserver: OutletObserver\n\n  constructor(module: Module, scope: Scope) {\n    this.module = module\n    this.scope = scope\n    this.controller = new module.controllerConstructor(this)\n    this.bindingObserver = new BindingObserver(this, this.dispatcher)\n    this.valueObserver = new ValueObserver(this, this.controller)\n    this.targetObserver = new TargetObserver(this, this)\n    this.outletObserver = new OutletObserver(this, this)\n\n    try {\n      this.controller.initialize()\n      this.logDebugActivity(\"initialize\")\n    } catch (error: any) {\n      this.handleError(error, \"initializing controller\")\n    }\n  }\n\n  connect() {\n    this.bindingObserver.start()\n    this.valueObserver.start()\n    this.targetObserver.start()\n    this.outletObserver.start()\n\n    try {\n      this.controller.connect()\n      this.logDebugActivity(\"connect\")\n    } catch (error: any) {\n      this.handleError(error, \"connecting controller\")\n    }\n  }\n\n  refresh() {\n    this.outletObserver.refresh()\n  }\n\n  disconnect() {\n    try {\n      this.controller.disconnect()\n      this.logDebugActivity(\"disconnect\")\n    } catch (error: any) {\n      this.handleError(error, \"disconnecting controller\")\n    }\n\n    this.outletObserver.stop()\n    this.targetObserver.stop()\n    this.valueObserver.stop()\n    this.bindingObserver.stop()\n  }\n\n  get application(): Application {\n    return this.module.application\n  }\n\n  get identifier(): string {\n    return this.module.identifier\n  }\n\n  get schema(): Schema {\n    return this.application.schema\n  }\n\n  get dispatcher(): Dispatcher {\n    return this.application.dispatcher\n  }\n\n  get element(): Element {\n    return this.scope.element\n  }\n\n  get parentElement(): Element | null {\n    return this.element.parentElement\n  }\n\n  // Error handling\n\n  handleError(error: Error, message: string, detail: object = {}) {\n    const { identifier, controller, element } = this\n    detail = Object.assign({ identifier, controller, element }, detail)\n    this.application.handleError(error, `Error ${message}`, detail)\n  }\n\n  // Debug logging\n\n  logDebugActivity = (functionName: string, detail: object = {}): void => {\n    const { identifier, controller, element } = this\n    detail = Object.assign({ identifier, controller, element }, detail)\n    this.application.logDebugActivity(this.identifier, functionName, detail)\n  }\n\n  // Target observer delegate\n\n  targetConnected(element: Element, name: string) {\n    this.invokeControllerMethod(`${name}TargetConnected`, element)\n  }\n\n  targetDisconnected(element: Element, name: string) {\n    this.invokeControllerMethod(`${name}TargetDisconnected`, element)\n  }\n\n  // Outlet observer delegate\n\n  outletConnected(outlet: Controller, element: Element, name: string) {\n    this.invokeControllerMethod(`${namespaceCamelize(name)}OutletConnected`, outlet, element)\n  }\n\n  outletDisconnected(outlet: Controller, element: Element, name: string) {\n    this.invokeControllerMethod(`${namespaceCamelize(name)}OutletDisconnected`, outlet, element)\n  }\n\n  // Private\n\n  invokeControllerMethod(methodName: string, ...args: any[]) {\n    const controller: any = this.controller\n    if (typeof controller[methodName] == \"function\") {\n      controller[methodName](...args)\n    }\n  }\n}\n","import { Constructor } from \"./constructor\"\nimport { readInheritableStaticArrayValues } from \"./inheritable_statics\"\n\nexport type Blessing<T> = (constructor: Constructor<T>) => PropertyDescriptorMap\n\nexport interface Blessable<T> extends Constructor<T> {\n  readonly blessings?: Blessing<T>[]\n}\n\nexport function bless<T>(constructor: Blessable<T>): Constructor<T> {\n  return shadow(constructor, getBlessedProperties(constructor))\n}\n\nfunction shadow<T>(constructor: Constructor<T>, properties: PropertyDescriptorMap) {\n  const shadowConstructor = extend(constructor)\n  const shadowProperties = getShadowProperties(constructor.prototype, properties)\n  Object.defineProperties(shadowConstructor.prototype, shadowProperties)\n  return shadowConstructor\n}\n\nfunction getBlessedProperties<T>(constructor: Constructor<T>) {\n  const blessings = readInheritableStaticArrayValues(constructor, \"blessings\") as Blessing<T>[]\n  return blessings.reduce((blessedProperties, blessing) => {\n    const properties = blessing(constructor)\n    for (const key in properties) {\n      const descriptor = blessedProperties[key] || ({} as PropertyDescriptor)\n      blessedProperties[key] = Object.assign(descriptor, properties[key])\n    }\n    return blessedProperties\n  }, {} as PropertyDescriptorMap)\n}\n\nfunction getShadowProperties(prototype: any, properties: PropertyDescriptorMap) {\n  return getOwnKeys(properties).reduce((shadowProperties, key) => {\n    const descriptor = getShadowedDescriptor(prototype, properties, key)\n    if (descriptor) {\n      Object.assign(shadowProperties, { [key]: descriptor })\n    }\n    return shadowProperties\n  }, {} as PropertyDescriptorMap)\n}\n\nfunction getShadowedDescriptor(prototype: any, properties: PropertyDescriptorMap, key: string | symbol) {\n  const shadowingDescriptor = Object.getOwnPropertyDescriptor(prototype, key)\n  const shadowedByValue = shadowingDescriptor && \"value\" in shadowingDescriptor\n  if (!shadowedByValue) {\n    const descriptor = Object.getOwnPropertyDescriptor(properties, key)!.value\n    if (shadowingDescriptor) {\n      descriptor.get = shadowingDescriptor.get || descriptor.get\n      descriptor.set = shadowingDescriptor.set || descriptor.set\n    }\n    return descriptor\n  }\n}\n\nconst getOwnKeys = (() => {\n  if (typeof Object.getOwnPropertySymbols == \"function\") {\n    return (object: any) => [...Object.getOwnPropertyNames(object), ...Object.getOwnPropertySymbols(object)]\n  } else {\n    return Object.getOwnPropertyNames\n  }\n})()\n\nconst extend = (() => {\n  function extendWithReflect<T extends Constructor<any>>(constructor: T): T {\n    function extended() {\n      return Reflect.construct(constructor, arguments, new.target)\n    }\n\n    extended.prototype = Object.create(constructor.prototype, {\n      constructor: { value: extended },\n    })\n\n    Reflect.setPrototypeOf(extended, constructor)\n    return extended as any\n  }\n\n  function testReflectExtension() {\n    const a = function (this: any) {\n      this.a.call(this)\n    } as any\n    const b = extendWithReflect(a)\n    b.prototype.a = function () {}\n    return new b()\n  }\n\n  try {\n    testReflectExtension()\n    return extendWithReflect\n  } catch (error: any) {\n    return <T extends Constructor<any>>(constructor: T) => class extended extends constructor {}\n  }\n})()\n","import { Application } from \"./application\"\nimport { Context } from \"./context\"\nimport { ControllerConstructor } from \"./controller\"\nimport { Definition, blessDefinition } from \"./definition\"\nimport { Scope } from \"./scope\"\n\nexport class Module {\n  readonly application: Application\n  readonly definition: Definition\n  private contextsByScope: WeakMap<Scope, Context>\n  private connectedContexts: Set<Context>\n\n  constructor(application: Application, definition: Definition) {\n    this.application = application\n    this.definition = blessDefinition(definition)\n    this.contextsByScope = new WeakMap()\n    this.connectedContexts = new Set()\n  }\n\n  get identifier(): string {\n    return this.definition.identifier\n  }\n\n  get controllerConstructor(): ControllerConstructor {\n    return this.definition.controllerConstructor\n  }\n\n  get contexts(): Context[] {\n    return Array.from(this.connectedContexts)\n  }\n\n  connectContextForScope(scope: Scope) {\n    const context = this.fetchContextForScope(scope)\n    this.connectedContexts.add(context)\n    context.connect()\n  }\n\n  disconnectContextForScope(scope: Scope) {\n    const context = this.contextsByScope.get(scope)\n    if (context) {\n      this.connectedContexts.delete(context)\n      context.disconnect()\n    }\n  }\n\n  private fetchContextForScope(scope: Scope): Context {\n    let context = this.contextsByScope.get(scope)\n    if (!context) {\n      context = new Context(this, scope)\n      this.contextsByScope.set(scope, context)\n    }\n    return context\n  }\n}\n","import { bless } from \"./blessing\"\nimport { ControllerConstructor } from \"./controller\"\n\nexport interface Definition {\n  identifier: string\n  controllerConstructor: ControllerConstructor\n}\n\nexport function blessDefinition(definition: Definition): Definition {\n  return {\n    identifier: definition.identifier,\n    controllerConstructor: bless(definition.controllerConstructor),\n  }\n}\n","import { Scope } from \"./scope\"\nimport { tokenize } from \"./string_helpers\"\n\nexport class ClassMap {\n  readonly scope: Scope\n\n  constructor(scope: Scope) {\n    this.scope = scope\n  }\n\n  has(name: string) {\n    return this.data.has(this.getDataKey(name))\n  }\n\n  get(name: string): string | undefined {\n    return this.getAll(name)[0]\n  }\n\n  getAll(name: string) {\n    const tokenString = this.data.get(this.getDataKey(name)) || \"\"\n    return tokenize(tokenString)\n  }\n\n  getAttributeName(name: string) {\n    return this.data.getAttributeNameForKey(this.getDataKey(name))\n  }\n\n  getDataKey(name: string) {\n    return `${name}-class`\n  }\n\n  get data() {\n    return this.scope.data\n  }\n}\n","import { Scope } from \"./scope\"\nimport { dasherize } from \"./string_helpers\"\n\nexport class DataMap {\n  readonly scope: Scope\n\n  constructor(scope: Scope) {\n    this.scope = scope\n  }\n\n  get element(): Element {\n    return this.scope.element\n  }\n\n  get identifier(): string {\n    return this.scope.identifier\n  }\n\n  get(key: string): string | null {\n    const name = this.getAttributeNameForKey(key)\n    return this.element.getAttribute(name)\n  }\n\n  set(key: string, value: string): string | null {\n    const name = this.getAttributeNameForKey(key)\n    this.element.setAttribute(name, value)\n    return this.get(key)\n  }\n\n  has(key: string): boolean {\n    const name = this.getAttributeNameForKey(key)\n    return this.element.hasAttribute(name)\n  }\n\n  delete(key: string): boolean {\n    if (this.has(key)) {\n      const name = this.getAttributeNameForKey(key)\n      this.element.removeAttribute(name)\n      return true\n    } else {\n      return false\n    }\n  }\n\n  getAttributeNameForKey(key: string): string {\n    return `data-${this.identifier}-${dasherize(key)}`\n  }\n}\n","import { Logger } from \"./logger\"\n\nexport class Guide {\n  readonly logger: Logger\n  readonly warnedKeysByObject: WeakMap<any, Set<string>> = new WeakMap()\n\n  constructor(logger: Logger) {\n    this.logger = logger\n  }\n\n  warn(object: any, key: string, message: string) {\n    let warnedKeys: Set<string> | undefined = this.warnedKeysByObject.get(object)\n\n    if (!warnedKeys) {\n      warnedKeys = new Set()\n      this.warnedKeysByObject.set(object, warnedKeys)\n    }\n\n    if (!warnedKeys.has(key)) {\n      warnedKeys.add(key)\n      this.logger.warn(message, object)\n    }\n  }\n}\n","export function attributeValueContainsToken(attributeName: string, token: string) {\n  return `[${attributeName}~=\"${token}\"]`\n}\n","import { Scope } from \"./scope\"\nimport { attributeValueContainsToken } from \"./selectors\"\n\nexport class TargetSet {\n  readonly scope: Scope\n\n  constructor(scope: Scope) {\n    this.scope = scope\n  }\n\n  get element() {\n    return this.scope.element\n  }\n\n  get identifier() {\n    return this.scope.identifier\n  }\n\n  get schema() {\n    return this.scope.schema\n  }\n\n  has(targetName: string) {\n    return this.find(targetName) != null\n  }\n\n  find(...targetNames: string[]) {\n    return targetNames.reduce(\n      (target, targetName) => target || this.findTarget(targetName) || this.findLegacyTarget(targetName),\n      undefined as Element | undefined\n    )\n  }\n\n  findAll(...targetNames: string[]) {\n    return targetNames.reduce(\n      (targets, targetName) => [\n        ...targets,\n        ...this.findAllTargets(targetName),\n        ...this.findAllLegacyTargets(targetName),\n      ],\n      [] as Element[]\n    )\n  }\n\n  private findTarget(targetName: string) {\n    const selector = this.getSelectorForTargetName(targetName)\n    return this.scope.findElement(selector)\n  }\n\n  private findAllTargets(targetName: string) {\n    const selector = this.getSelectorForTargetName(targetName)\n    return this.scope.findAllElements(selector)\n  }\n\n  private getSelectorForTargetName(targetName: string) {\n    const attributeName = this.schema.targetAttributeForScope(this.identifier)\n    return attributeValueContainsToken(attributeName, targetName)\n  }\n\n  private findLegacyTarget(targetName: string) {\n    const selector = this.getLegacySelectorForTargetName(targetName)\n    return this.deprecate(this.scope.findElement(selector), targetName)\n  }\n\n  private findAllLegacyTargets(targetName: string) {\n    const selector = this.getLegacySelectorForTargetName(targetName)\n    return this.scope.findAllElements(selector).map((element) => this.deprecate(element, targetName))\n  }\n\n  private getLegacySelectorForTargetName(targetName: string) {\n    const targetDescriptor = `${this.identifier}.${targetName}`\n    return attributeValueContainsToken(this.schema.targetAttribute, targetDescriptor)\n  }\n\n  private deprecate<T>(element: T, targetName: string) {\n    if (element) {\n      const { identifier } = this\n      const attributeName = this.schema.targetAttribute\n      const revisedAttributeName = this.schema.targetAttributeForScope(identifier)\n      this.guide.warn(\n        element,\n        `target:${targetName}`,\n        `Please replace ${attributeName}=\"${identifier}.${targetName}\" with ${revisedAttributeName}=\"${targetName}\". ` +\n          `The ${attributeName} attribute is deprecated and will be removed in a future version of Stimulus.`\n      )\n    }\n    return element\n  }\n\n  private get guide() {\n    return this.scope.guide\n  }\n}\n","import { Scope } from \"./scope\"\n\nexport class OutletSet {\n  readonly scope: Scope\n  readonly controllerElement: Element\n\n  constructor(scope: Scope, controllerElement: Element) {\n    this.scope = scope\n    this.controllerElement = controllerElement\n  }\n\n  get element() {\n    return this.scope.element\n  }\n\n  get identifier() {\n    return this.scope.identifier\n  }\n\n  get schema() {\n    return this.scope.schema\n  }\n\n  has(outletName: string) {\n    return this.find(outletName) != null\n  }\n\n  find(...outletNames: string[]) {\n    return outletNames.reduce(\n      (outlet, outletName) => outlet || this.findOutlet(outletName),\n      undefined as Element | undefined\n    )\n  }\n\n  findAll(...outletNames: string[]) {\n    return outletNames.reduce(\n      (outlets, outletName) => [...outlets, ...this.findAllOutlets(outletName)],\n      [] as Element[]\n    )\n  }\n\n  getSelectorForOutletName(outletName: string) {\n    const attributeName = this.schema.outletAttributeForScope(this.identifier, outletName)\n    return this.controllerElement.getAttribute(attributeName)\n  }\n\n  private findOutlet(outletName: string) {\n    const selector = this.getSelectorForOutletName(outletName)\n    if (selector) return this.findElement(selector, outletName)\n  }\n\n  private findAllOutlets(outletName: string) {\n    const selector = this.getSelectorForOutletName(outletName)\n    return selector ? this.findAllElements(selector, outletName) : []\n  }\n\n  private findElement(selector: string, outletName: string): Element | undefined {\n    const elements = this.scope.queryElements(selector)\n    return elements.filter((element) => this.matchesElement(element, selector, outletName))[0]\n  }\n\n  private findAllElements(selector: string, outletName: string): Element[] {\n    const elements = this.scope.queryElements(selector)\n    return elements.filter((element) => this.matchesElement(element, selector, outletName))\n  }\n\n  private matchesElement(element: Element, selector: string, outletName: string): boolean {\n    const controllerAttribute = element.getAttribute(this.scope.schema.controllerAttribute) || \"\"\n    return element.matches(selector) && controllerAttribute.split(\" \").includes(outletName)\n  }\n}\n","import { ClassMap } from \"./class_map\"\nimport { DataMap } from \"./data_map\"\nimport { Guide } from \"./guide\"\nimport { Logger } from \"./logger\"\nimport { Schema } from \"./schema\"\nimport { attributeValueContainsToken } from \"./selectors\"\nimport { TargetSet } from \"./target_set\"\nimport { OutletSet } from \"./outlet_set\"\n\nexport class Scope {\n  readonly schema: Schema\n  readonly element: Element\n  readonly identifier: string\n  readonly guide: Guide\n  readonly outlets: OutletSet\n  readonly targets = new TargetSet(this)\n  readonly classes = new ClassMap(this)\n  readonly data = new DataMap(this)\n\n  constructor(schema: Schema, element: Element, identifier: string, logger: Logger) {\n    this.schema = schema\n    this.element = element\n    this.identifier = identifier\n    this.guide = new Guide(logger)\n    this.outlets = new OutletSet(this.documentScope, element)\n  }\n\n  findElement(selector: string): Element | undefined {\n    return this.element.matches(selector) ? this.element : this.queryElements(selector).find(this.containsElement)\n  }\n\n  findAllElements(selector: string): Element[] {\n    return [\n      ...(this.element.matches(selector) ? [this.element] : []),\n      ...this.queryElements(selector).filter(this.containsElement),\n    ]\n  }\n\n  containsElement = (element: Element): boolean => {\n    return element.closest(this.controllerSelector) === this.element\n  }\n\n  queryElements(selector: string): Element[] {\n    return Array.from(this.element.querySelectorAll(selector))\n  }\n\n  private get controllerSelector(): string {\n    return attributeValueContainsToken(this.schema.controllerAttribute, this.identifier)\n  }\n\n  private get isDocumentScope() {\n    return this.element === document.documentElement\n  }\n\n  private get documentScope(): Scope {\n    return this.isDocumentScope\n      ? this\n      : new Scope(this.schema, document.documentElement, this.identifier, this.guide.logger)\n  }\n}\n","import { ErrorHandler } from \"./error_handler\"\nimport { Schema } from \"./schema\"\nimport { Scope } from \"./scope\"\nimport { Token, ValueListObserver, ValueListObserverDelegate } from \"../mutation-observers\"\n\nexport interface ScopeObserverDelegate extends ErrorHandler {\n  createScopeForElementAndIdentifier(element: Element, identifier: string): Scope\n  scopeConnected(scope: Scope): void\n  scopeDisconnected(scope: Scope): void\n}\n\nexport class ScopeObserver implements ValueListObserverDelegate<Scope> {\n  readonly element: Element\n  readonly schema: Schema\n  private delegate: ScopeObserverDelegate\n  private valueListObserver: ValueListObserver<Scope>\n  private scopesByIdentifierByElement: WeakMap<Element, Map<string, Scope>>\n  private scopeReferenceCounts: WeakMap<Scope, number>\n\n  constructor(element: Element, schema: Schema, delegate: ScopeObserverDelegate) {\n    this.element = element\n    this.schema = schema\n    this.delegate = delegate\n    this.valueListObserver = new ValueListObserver(this.element, this.controllerAttribute, this)\n    this.scopesByIdentifierByElement = new WeakMap()\n    this.scopeReferenceCounts = new WeakMap()\n  }\n\n  start() {\n    this.valueListObserver.start()\n  }\n\n  stop() {\n    this.valueListObserver.stop()\n  }\n\n  get controllerAttribute() {\n    return this.schema.controllerAttribute\n  }\n\n  // Value observer delegate\n\n  parseValueForToken(token: Token): Scope | undefined {\n    const { element, content: identifier } = token\n    const scopesByIdentifier = this.fetchScopesByIdentifierForElement(element)\n\n    let scope = scopesByIdentifier.get(identifier)\n    if (!scope) {\n      scope = this.delegate.createScopeForElementAndIdentifier(element, identifier)\n      scopesByIdentifier.set(identifier, scope)\n    }\n\n    return scope\n  }\n\n  elementMatchedValue(element: Element, value: Scope) {\n    const referenceCount = (this.scopeReferenceCounts.get(value) || 0) + 1\n    this.scopeReferenceCounts.set(value, referenceCount)\n    if (referenceCount == 1) {\n      this.delegate.scopeConnected(value)\n    }\n  }\n\n  elementUnmatchedValue(element: Element, value: Scope) {\n    const referenceCount = this.scopeReferenceCounts.get(value)\n    if (referenceCount) {\n      this.scopeReferenceCounts.set(value, referenceCount - 1)\n      if (referenceCount == 1) {\n        this.delegate.scopeDisconnected(value)\n      }\n    }\n  }\n\n  private fetchScopesByIdentifierForElement(element: Element) {\n    let scopesByIdentifier = this.scopesByIdentifierByElement.get(element)\n    if (!scopesByIdentifier) {\n      scopesByIdentifier = new Map()\n      this.scopesByIdentifierByElement.set(element, scopesByIdentifier)\n    }\n    return scopesByIdentifier\n  }\n}\n","import { Application } from \"./application\"\nimport { Context } from \"./context\"\nimport { Definition } from \"./definition\"\nimport { Module } from \"./module\"\nimport { Multimap } from \"../multimap\"\nimport { Scope } from \"./scope\"\nimport { ScopeObserver, ScopeObserverDelegate } from \"./scope_observer\"\n\nexport class Router implements ScopeObserverDelegate {\n  readonly application: Application\n  private scopeObserver: ScopeObserver\n  private scopesByIdentifier: Multimap<string, Scope>\n  private modulesByIdentifier: Map<string, Module>\n\n  constructor(application: Application) {\n    this.application = application\n    this.scopeObserver = new ScopeObserver(this.element, this.schema, this)\n    this.scopesByIdentifier = new Multimap()\n    this.modulesByIdentifier = new Map()\n  }\n\n  get element() {\n    return this.application.element\n  }\n\n  get schema() {\n    return this.application.schema\n  }\n\n  get logger() {\n    return this.application.logger\n  }\n\n  get controllerAttribute(): string {\n    return this.schema.controllerAttribute\n  }\n\n  get modules() {\n    return Array.from(this.modulesByIdentifier.values())\n  }\n\n  get contexts() {\n    return this.modules.reduce((contexts, module) => contexts.concat(module.contexts), [] as Context[])\n  }\n\n  start() {\n    this.scopeObserver.start()\n  }\n\n  stop() {\n    this.scopeObserver.stop()\n  }\n\n  loadDefinition(definition: Definition) {\n    this.unloadIdentifier(definition.identifier)\n    const module = new Module(this.application, definition)\n    this.connectModule(module)\n    const afterLoad = (definition.controllerConstructor as any).afterLoad\n    if (afterLoad) {\n      afterLoad.call(definition.controllerConstructor, definition.identifier, this.application)\n    }\n  }\n\n  unloadIdentifier(identifier: string) {\n    const module = this.modulesByIdentifier.get(identifier)\n    if (module) {\n      this.disconnectModule(module)\n    }\n  }\n\n  getContextForElementAndIdentifier(element: Element, identifier: string) {\n    const module = this.modulesByIdentifier.get(identifier)\n    if (module) {\n      return module.contexts.find((context) => context.element == element)\n    }\n  }\n\n  // Error handler delegate\n\n  handleError(error: Error, message: string, detail: any) {\n    this.application.handleError(error, message, detail)\n  }\n\n  // Scope observer delegate\n\n  createScopeForElementAndIdentifier(element: Element, identifier: string) {\n    return new Scope(this.schema, element, identifier, this.logger)\n  }\n\n  scopeConnected(scope: Scope) {\n    this.scopesByIdentifier.add(scope.identifier, scope)\n    const module = this.modulesByIdentifier.get(scope.identifier)\n    if (module) {\n      module.connectContextForScope(scope)\n    }\n  }\n\n  scopeDisconnected(scope: Scope) {\n    this.scopesByIdentifier.delete(scope.identifier, scope)\n    const module = this.modulesByIdentifier.get(scope.identifier)\n    if (module) {\n      module.disconnectContextForScope(scope)\n    }\n  }\n\n  // Modules\n\n  private connectModule(module: Module) {\n    this.modulesByIdentifier.set(module.identifier, module)\n    const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier)\n    scopes.forEach((scope) => module.connectContextForScope(scope))\n  }\n\n  private disconnectModule(module: Module) {\n    this.modulesByIdentifier.delete(module.identifier)\n    const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier)\n    scopes.forEach((scope) => module.disconnectContextForScope(scope))\n  }\n}\n","export interface Schema {\n  controllerAttribute: string\n  actionAttribute: string\n  targetAttribute: string\n  targetAttributeForScope(identifier: string): string\n  outletAttributeForScope(identifier: string, outlet: string): string\n  keyMappings: { [key: string]: string }\n}\n\nexport const defaultSchema: Schema = {\n  controllerAttribute: \"data-controller\",\n  actionAttribute: \"data-action\",\n  targetAttribute: \"data-target\",\n  targetAttributeForScope: (identifier) => `data-${identifier}-target`,\n  outletAttributeForScope: (identifier, outlet) => `data-${identifier}-${outlet}-outlet`,\n  keyMappings: {\n    enter: \"Enter\",\n    tab: \"Tab\",\n    esc: \"Escape\",\n    space: \" \",\n    up: \"ArrowUp\",\n    down: \"ArrowDown\",\n    left: \"ArrowLeft\",\n    right: \"ArrowRight\",\n    home: \"Home\",\n    end: \"End\",\n    // [a-z]\n    ...objectFromEntries(\"abcdefghijklmnopqrstuvwxyz\".split(\"\").map((c) => [c, c])),\n    // [0-9]\n    ...objectFromEntries(\"0123456789\".split(\"\").map((n) => [n, n])),\n  },\n}\n\nfunction objectFromEntries(array: [string, any][]): object {\n  // polyfill\n  return array.reduce((memo, [k, v]) => ({ ...memo, [k]: v }), {})\n}\n","import { Controller, ControllerConstructor } from \"./controller\"\nimport { Definition } from \"./definition\"\nimport { Dispatcher } from \"./dispatcher\"\nimport { ErrorHandler } from \"./error_handler\"\nimport { Logger } from \"./logger\"\nimport { Router } from \"./router\"\nimport { Schema, defaultSchema } from \"./schema\"\nimport { ActionDescriptorFilter, ActionDescriptorFilters, defaultActionDescriptorFilters } from \"./action_descriptor\"\n\nexport class Application implements ErrorHandler {\n  readonly element: Element\n  readonly schema: Schema\n  readonly dispatcher: Dispatcher\n  readonly router: Router\n  readonly actionDescriptorFilters: ActionDescriptorFilters\n  logger: Logger = console\n  debug = false\n\n  static start(element?: Element, schema?: Schema): Application {\n    const application = new this(element, schema)\n    application.start()\n    return application\n  }\n\n  constructor(element: Element = document.documentElement, schema: Schema = defaultSchema) {\n    this.element = element\n    this.schema = schema\n    this.dispatcher = new Dispatcher(this)\n    this.router = new Router(this)\n    this.actionDescriptorFilters = { ...defaultActionDescriptorFilters }\n  }\n\n  async start() {\n    await domReady()\n    this.logDebugActivity(\"application\", \"starting\")\n    this.dispatcher.start()\n    this.router.start()\n    this.logDebugActivity(\"application\", \"start\")\n  }\n\n  stop() {\n    this.logDebugActivity(\"application\", \"stopping\")\n    this.dispatcher.stop()\n    this.router.stop()\n    this.logDebugActivity(\"application\", \"stop\")\n  }\n\n  register(identifier: string, controllerConstructor: ControllerConstructor) {\n    this.load({ identifier, controllerConstructor })\n  }\n\n  registerActionOption(name: string, filter: ActionDescriptorFilter) {\n    this.actionDescriptorFilters[name] = filter\n  }\n\n  load(...definitions: Definition[]): void\n  load(definitions: Definition[]): void\n  load(head: Definition | Definition[], ...rest: Definition[]) {\n    const definitions = Array.isArray(head) ? head : [head, ...rest]\n    definitions.forEach((definition) => {\n      if ((definition.controllerConstructor as any).shouldLoad) {\n        this.router.loadDefinition(definition)\n      }\n    })\n  }\n\n  unload(...identifiers: string[]): void\n  unload(identifiers: string[]): void\n  unload(head: string | string[], ...rest: string[]) {\n    const identifiers = Array.isArray(head) ? head : [head, ...rest]\n    identifiers.forEach((identifier) => this.router.unloadIdentifier(identifier))\n  }\n\n  // Controllers\n\n  get controllers(): Controller[] {\n    return this.router.contexts.map((context) => context.controller)\n  }\n\n  getControllerForElementAndIdentifier(element: Element, identifier: string): Controller | null {\n    const context = this.router.getContextForElementAndIdentifier(element, identifier)\n    return context ? context.controller : null\n  }\n\n  // Error handling\n\n  handleError(error: Error, message: string, detail: object) {\n    this.logger.error(`%s\\n\\n%o\\n\\n%o`, message, error, detail)\n\n    window.onerror?.(message, \"\", 0, 0, error)\n  }\n\n  // Debug logging\n\n  logDebugActivity = (identifier: string, functionName: string, detail: object = {}): void => {\n    if (this.debug) {\n      this.logFormattedMessage(identifier, functionName, detail)\n    }\n  }\n\n  private logFormattedMessage(identifier: string, functionName: string, detail: object = {}) {\n    detail = Object.assign({ application: this }, detail)\n\n    this.logger.groupCollapsed(`${identifier} #${functionName}`)\n    this.logger.log(\"details:\", { ...detail })\n    this.logger.groupEnd()\n  }\n}\n\nfunction domReady() {\n  return new Promise<void>((resolve) => {\n    if (document.readyState == \"loading\") {\n      document.addEventListener(\"DOMContentLoaded\", () => resolve())\n    } else {\n      resolve()\n    }\n  })\n}\n","import { Constructor } from \"./constructor\"\nimport { Controller } from \"./controller\"\nimport { readInheritableStaticObjectPairs } from \"./inheritable_statics\"\nimport { camelize, capitalize, dasherize } from \"./string_helpers\"\nimport { isSomething, hasProperty } from \"./utils\"\n\nexport function ValuePropertiesBlessing<T>(constructor: Constructor<T>) {\n  const valueDefinitionPairs = readInheritableStaticObjectPairs<T, ValueTypeDefinition>(constructor, \"values\")\n  const propertyDescriptorMap: PropertyDescriptorMap = {\n    valueDescriptorMap: {\n      get(this: Controller) {\n        return valueDefinitionPairs.reduce((result, valueDefinitionPair) => {\n          const valueDescriptor = parseValueDefinitionPair(valueDefinitionPair, this.identifier)\n          const attributeName = this.data.getAttributeNameForKey(valueDescriptor.key)\n          return Object.assign(result, { [attributeName]: valueDescriptor })\n        }, {} as ValueDescriptorMap)\n      },\n    },\n  }\n\n  return valueDefinitionPairs.reduce((properties, valueDefinitionPair) => {\n    return Object.assign(properties, propertiesForValueDefinitionPair(valueDefinitionPair))\n  }, propertyDescriptorMap)\n}\n\nexport function propertiesForValueDefinitionPair<T>(\n  valueDefinitionPair: ValueDefinitionPair,\n  controller?: string\n): PropertyDescriptorMap {\n  const definition = parseValueDefinitionPair(valueDefinitionPair, controller)\n  const { key, name, reader: read, writer: write } = definition\n\n  return {\n    [name]: {\n      get(this: Controller) {\n        const value = this.data.get(key)\n        if (value !== null) {\n          return read(value)\n        } else {\n          return definition.defaultValue\n        }\n      },\n\n      set(this: Controller, value: T | undefined) {\n        if (value === undefined) {\n          this.data.delete(key)\n        } else {\n          this.data.set(key, write(value))\n        }\n      },\n    },\n\n    [`has${capitalize(name)}`]: {\n      get(this: Controller): boolean {\n        return this.data.has(key) || definition.hasCustomDefaultValue\n      },\n    },\n  }\n}\n\nexport type ValueDescriptor = {\n  type: ValueType\n  key: string\n  name: string\n  defaultValue: ValueTypeDefault\n  hasCustomDefaultValue: boolean\n  reader: Reader\n  writer: Writer\n}\n\nexport type ValueDescriptorMap = { [attributeName: string]: ValueDescriptor }\n\nexport type ValueDefinitionMap = { [token: string]: ValueTypeDefinition }\n\nexport type ValueDefinitionPair = [string, ValueTypeDefinition]\n\nexport type ValueTypeConstant = typeof Array | typeof Boolean | typeof Number | typeof Object | typeof String\n\nexport type ValueTypeDefault = Array<any> | boolean | number | Object | string\n\nexport type ValueTypeObject = Partial<{ type: ValueTypeConstant; default: ValueTypeDefault }>\n\nexport type ValueTypeDefinition = ValueTypeConstant | ValueTypeDefault | ValueTypeObject\n\nexport type ValueType = \"array\" | \"boolean\" | \"number\" | \"object\" | \"string\"\n\nfunction parseValueDefinitionPair([token, typeDefinition]: ValueDefinitionPair, controller?: string): ValueDescriptor {\n  return valueDescriptorForTokenAndTypeDefinition({\n    controller,\n    token,\n    typeDefinition,\n  })\n}\n\nexport function parseValueTypeConstant(constant?: ValueTypeConstant) {\n  switch (constant) {\n    case Array:\n      return \"array\"\n    case Boolean:\n      return \"boolean\"\n    case Number:\n      return \"number\"\n    case Object:\n      return \"object\"\n    case String:\n      return \"string\"\n  }\n}\n\nexport function parseValueTypeDefault(defaultValue?: ValueTypeDefault) {\n  switch (typeof defaultValue) {\n    case \"boolean\":\n      return \"boolean\"\n    case \"number\":\n      return \"number\"\n    case \"string\":\n      return \"string\"\n  }\n\n  if (Array.isArray(defaultValue)) return \"array\"\n  if (Object.prototype.toString.call(defaultValue) === \"[object Object]\") return \"object\"\n}\n\ntype ValueTypeObjectPayload = {\n  controller?: string\n  token: string\n  typeObject: ValueTypeObject\n}\n\nexport function parseValueTypeObject(payload: ValueTypeObjectPayload) {\n  const { controller, token, typeObject } = payload\n\n  const hasType = isSomething(typeObject.type)\n  const hasDefault = isSomething(typeObject.default)\n\n  const fullObject = hasType && hasDefault\n  const onlyType = hasType && !hasDefault\n  const onlyDefault = !hasType && hasDefault\n\n  const typeFromObject = parseValueTypeConstant(typeObject.type)\n  const typeFromDefaultValue = parseValueTypeDefault(payload.typeObject.default)\n\n  if (onlyType) return typeFromObject\n  if (onlyDefault) return typeFromDefaultValue\n\n  if (typeFromObject !== typeFromDefaultValue) {\n    const propertyPath = controller ? `${controller}.${token}` : token\n\n    throw new Error(\n      `The specified default value for the Stimulus Value \"${propertyPath}\" must match the defined type \"${typeFromObject}\". The provided default value of \"${typeObject.default}\" is of type \"${typeFromDefaultValue}\".`\n    )\n  }\n\n  if (fullObject) return typeFromObject\n}\n\ntype ValueTypeDefinitionPayload = {\n  controller?: string\n  token: string\n  typeDefinition: ValueTypeDefinition\n}\n\nexport function parseValueTypeDefinition(payload: ValueTypeDefinitionPayload): ValueType {\n  const { controller, token, typeDefinition } = payload\n\n  const typeObject = { controller, token, typeObject: typeDefinition as ValueTypeObject }\n\n  const typeFromObject = parseValueTypeObject(typeObject as ValueTypeObjectPayload)\n  const typeFromDefaultValue = parseValueTypeDefault(typeDefinition as ValueTypeDefault)\n  const typeFromConstant = parseValueTypeConstant(typeDefinition as ValueTypeConstant)\n\n  const type = typeFromObject || typeFromDefaultValue || typeFromConstant\n\n  if (type) return type\n\n  const propertyPath = controller ? `${controller}.${typeDefinition}` : token\n\n  throw new Error(`Unknown value type \"${propertyPath}\" for \"${token}\" value`)\n}\n\nexport function defaultValueForDefinition(typeDefinition: ValueTypeDefinition): ValueTypeDefault {\n  const constant = parseValueTypeConstant(typeDefinition as ValueTypeConstant)\n  if (constant) return defaultValuesByType[constant]\n\n  const hasDefault = hasProperty(typeDefinition, \"default\")\n  const hasType = hasProperty(typeDefinition, \"type\")\n  const typeObject = typeDefinition as ValueTypeObject\n\n  if (hasDefault) return typeObject.default!\n\n  if (hasType) {\n    const { type } = typeObject\n    const constantFromType = parseValueTypeConstant(type)\n\n    if (constantFromType) return defaultValuesByType[constantFromType]\n  }\n\n  return typeDefinition\n}\n\nfunction valueDescriptorForTokenAndTypeDefinition(payload: ValueTypeDefinitionPayload) {\n  const { token, typeDefinition } = payload\n\n  const key = `${dasherize(token)}-value`\n  const type = parseValueTypeDefinition(payload)\n  return {\n    type,\n    key,\n    name: camelize(key),\n    get defaultValue() {\n      return defaultValueForDefinition(typeDefinition)\n    },\n    get hasCustomDefaultValue() {\n      return parseValueTypeDefault(typeDefinition) !== undefined\n    },\n    reader: readers[type],\n    writer: writers[type] || writers.default,\n  }\n}\n\nconst defaultValuesByType = {\n  get array() {\n    return []\n  },\n  boolean: false,\n  number: 0,\n  get object() {\n    return {}\n  },\n  string: \"\",\n}\n\ntype Reader = (value: string) => any\n\nconst readers: { [type: string]: Reader } = {\n  array(value: string): any[] {\n    const array = JSON.parse(value)\n    if (!Array.isArray(array)) {\n      throw new TypeError(\n        `expected value of type \"array\" but instead got value \"${value}\" of type \"${parseValueTypeDefault(array)}\"`\n      )\n    }\n    return array\n  },\n\n  boolean(value: string): boolean {\n    return !(value == \"0\" || String(value).toLowerCase() == \"false\")\n  },\n\n  number(value: string): number {\n    return Number(value)\n  },\n\n  object(value: string): object {\n    const object = JSON.parse(value)\n    if (object === null || typeof object != \"object\" || Array.isArray(object)) {\n      throw new TypeError(\n        `expected value of type \"object\" but instead got value \"${value}\" of type \"${parseValueTypeDefault(object)}\"`\n      )\n    }\n    return object\n  },\n\n  string(value: string): string {\n    return value\n  },\n}\n\ntype Writer = (value: any) => string\n\nconst writers: { [type: string]: Writer } = {\n  default: writeString,\n  array: writeJSON,\n  object: writeJSON,\n}\n\nfunction writeJSON(value: any) {\n  return JSON.stringify(value)\n}\n\nfunction writeString(value: any) {\n  return `${value}`\n}\n","import { Application } from \"./application\"\nimport { ClassPropertiesBlessing } from \"./class_properties\"\nimport { Constructor } from \"./constructor\"\nimport { Context } from \"./context\"\nimport { OutletPropertiesBlessing } from \"./outlet_properties\"\nimport { TargetPropertiesBlessing } from \"./target_properties\"\nimport { ValuePropertiesBlessing, ValueDefinitionMap } from \"./value_properties\"\n\nexport type ControllerConstructor = Constructor<Controller>\n\ntype DispatchOptions = Partial<{\n  target: Element | Window | Document\n  detail: Object\n  prefix: string\n  bubbles: boolean\n  cancelable: boolean\n}>\n\nexport class Controller<ElementType extends Element = Element> {\n  static blessings = [\n    ClassPropertiesBlessing,\n    TargetPropertiesBlessing,\n    ValuePropertiesBlessing,\n    OutletPropertiesBlessing,\n  ]\n  static targets: string[] = []\n  static outlets: string[] = []\n  static values: ValueDefinitionMap = {}\n\n  static get shouldLoad() {\n    return true\n  }\n\n  static afterLoad(_identifier: string, _application: Application) {\n    return\n  }\n\n  readonly context: Context\n\n  constructor(context: Context) {\n    this.context = context\n  }\n\n  get application() {\n    return this.context.application\n  }\n\n  get scope() {\n    return this.context.scope\n  }\n\n  get element() {\n    return this.scope.element as ElementType\n  }\n\n  get identifier() {\n    return this.scope.identifier\n  }\n\n  get targets() {\n    return this.scope.targets\n  }\n\n  get outlets() {\n    return this.scope.outlets\n  }\n\n  get classes() {\n    return this.scope.classes\n  }\n\n  get data() {\n    return this.scope.data\n  }\n\n  initialize() {\n    // Override in your subclass to set up initial controller state\n  }\n\n  connect() {\n    // Override in your subclass to respond when the controller is connected to the DOM\n  }\n\n  disconnect() {\n    // Override in your subclass to respond when the controller is disconnected from the DOM\n  }\n\n  dispatch(\n    eventName: string,\n    {\n      target = this.element,\n      detail = {},\n      prefix = this.identifier,\n      bubbles = true,\n      cancelable = true,\n    }: DispatchOptions = {}\n  ) {\n    const type = prefix ? `${prefix}:${eventName}` : eventName\n    const event = new CustomEvent(type, { detail, bubbles, cancelable })\n    target.dispatchEvent(event)\n    return event\n  }\n}\n","import { Constructor } from \"./constructor\"\nimport { Controller } from \"./controller\"\nimport { readInheritableStaticArrayValues } from \"./inheritable_statics\"\nimport { capitalize } from \"./string_helpers\"\n\nexport function ClassPropertiesBlessing<T>(constructor: Constructor<T>) {\n  const classes = readInheritableStaticArrayValues(constructor, \"classes\")\n  return classes.reduce((properties, classDefinition) => {\n    return Object.assign(properties, propertiesForClassDefinition(classDefinition))\n  }, {} as PropertyDescriptorMap)\n}\n\nfunction propertiesForClassDefinition(key: string) {\n  return {\n    [`${key}Class`]: {\n      get(this: Controller) {\n        const { classes } = this\n        if (classes.has(key)) {\n          return classes.get(key)\n        } else {\n          const attribute = classes.getAttributeName(key)\n          throw new Error(`Missing attribute \"${attribute}\"`)\n        }\n      },\n    },\n\n    [`${key}Classes`]: {\n      get(this: Controller) {\n        return this.classes.getAll(key)\n      },\n    },\n\n    [`has${capitalize(key)}Class`]: {\n      get(this: Controller) {\n        return this.classes.has(key)\n      },\n    },\n  }\n}\n","import { Constructor } from \"./constructor\"\nimport { Controller } from \"./controller\"\nimport { readInheritableStaticArrayValues } from \"./inheritable_statics\"\nimport { capitalize } from \"./string_helpers\"\n\nexport function TargetPropertiesBlessing<T>(constructor: Constructor<T>) {\n  const targets = readInheritableStaticArrayValues(constructor, \"targets\")\n  return targets.reduce((properties, targetDefinition) => {\n    return Object.assign(properties, propertiesForTargetDefinition(targetDefinition))\n  }, {} as PropertyDescriptorMap)\n}\n\nfunction propertiesForTargetDefinition(name: string) {\n  return {\n    [`${name}Target`]: {\n      get(this: Controller) {\n        const target = this.targets.find(name)\n        if (target) {\n          return target\n        } else {\n          throw new Error(`Missing target element \"${name}\" for \"${this.identifier}\" controller`)\n        }\n      },\n    },\n\n    [`${name}Targets`]: {\n      get(this: Controller) {\n        return this.targets.findAll(name)\n      },\n    },\n\n    [`has${capitalize(name)}Target`]: {\n      get(this: Controller) {\n        return this.targets.has(name)\n      },\n    },\n  }\n}\n","import { Constructor } from \"./constructor\"\nimport { Controller } from \"./controller\"\nimport { readInheritableStaticArrayValues } from \"./inheritable_statics\"\nimport { capitalize, namespaceCamelize } from \"./string_helpers\"\n\nexport function OutletPropertiesBlessing<T>(constructor: Constructor<T>) {\n  const outlets = readInheritableStaticArrayValues(constructor, \"outlets\")\n  return outlets.reduce((properties: any, outletDefinition: any) => {\n    return Object.assign(properties, propertiesForOutletDefinition(outletDefinition))\n  }, {} as PropertyDescriptorMap)\n}\n\nfunction propertiesForOutletDefinition(name: string) {\n  const camelizedName = namespaceCamelize(name)\n\n  return {\n    [`${camelizedName}Outlet`]: {\n      get(this: Controller) {\n        const outlet = this.outlets.find(name)\n\n        if (outlet) {\n          const outletController = this.application.getControllerForElementAndIdentifier(outlet, name)\n          if (outletController) {\n            return outletController\n          } else {\n            throw new Error(\n              `Missing \"${this.application.schema.controllerAttribute}=${name}\" attribute on outlet element for \"${this.identifier}\" controller`\n            )\n          }\n        }\n\n        throw new Error(`Missing outlet element \"${name}\" for \"${this.identifier}\" controller`)\n      },\n    },\n\n    [`${camelizedName}Outlets`]: {\n      get(this: Controller) {\n        const outlets = this.outlets.findAll(name)\n\n        if (outlets.length > 0) {\n          return outlets\n            .map((outlet: Element) => {\n              const controller = this.application.getControllerForElementAndIdentifier(outlet, name)\n              if (controller) {\n                return controller\n              } else {\n                console.warn(\n                  `The provided outlet element is missing the outlet controller \"${name}\" for \"${this.identifier}\"`,\n                  outlet\n                )\n              }\n            })\n            .filter((controller) => controller) as Controller[]\n        }\n\n        return []\n      },\n    },\n\n    [`${camelizedName}OutletElement`]: {\n      get(this: Controller) {\n        const outlet = this.outlets.find(name)\n        if (outlet) {\n          return outlet\n        } else {\n          throw new Error(`Missing outlet element \"${name}\" for \"${this.identifier}\" controller`)\n        }\n      },\n    },\n\n    [`${camelizedName}OutletElements`]: {\n      get(this: Controller) {\n        return this.outlets.findAll(name)\n      },\n    },\n\n    [`has${capitalize(camelizedName)}Outlet`]: {\n      get(this: Controller) {\n        return this.outlets.has(name)\n      },\n    },\n  }\n}\n"],"names":["EventListener","constructor","eventTarget","eventName","eventOptions","this","unorderedBindings","Set","connect","addEventListener","disconnect","removeEventListener","bindingConnected","binding","add","bindingDisconnected","delete","handleEvent","event","extendedEvent","stopImmediatePropagation","Object","assign","immediatePropagationStopped","call","extendEvent","bindings","hasBindings","size","Array","from","sort","left","right","leftIndex","index","rightIndex","Dispatcher","application","eventListenerMaps","Map","started","start","eventListeners","forEach","eventListener","stop","values","reduce","listeners","map","concat","fetchEventListenerForBinding","clearEventListeners","clearEventListenersForBinding","handleError","error","message","detail","removeMappedEventListenerFor","eventListenerMap","fetchEventListenerMapForEventTarget","cacheKey","fetchEventListener","get","createEventListener","set","parts","keys","key","push","join","defaultActionDescriptorFilters","value","stopPropagation","prevent","preventDefault","self","element","target","descriptorPattern","parseEventTarget","eventTargetName","window","document","camelize","replace","_","char","toUpperCase","namespaceCamelize","capitalize","charAt","slice","dasherize","toLowerCase","isSomething","object","hasProperty","property","prototype","hasOwnProperty","defaultEventNames","a","button","form","details","input","e","getAttribute","select","textarea","Error","typecast","JSON","parse","o_O","Binding","context","action","identifier","willBeInvokedByEvent","applyEventModifiers","invokeWithEvent","method","controller","methodName","actionDescriptorFilters","passes","name","entries","filter","currentTarget","params","actionEvent","logDebugActivity","KeyboardEvent","isFilterTarget","Element","contains","scope","containsElement","ElementObserver","delegate","attributes","childList","subtree","elements","mutationObserver","MutationObserver","mutations","processMutations","observe","mutationObserverInit","refresh","pause","callback","takeRecords","matches","matchElementsInTree","has","removeElement","addElement","mutation","processMutation","type","processAttributeChange","attributeName","processRemovedNodes","removedNodes","processAddedNodes","addedNodes","elementAttributeChanged","matchElement","nodes","node","elementFromNode","processTree","elementIsActive","tree","processor","nodeType","Node","ELEMENT_NODE","isConnected","elementMatched","elementUnmatched","AttributeObserver","elementObserver","selector","hasAttribute","match","querySelectorAll","elementMatchedAttribute","elementUnmatchedAttribute","elementAttributeValueChanged","fetch","del","prune","Multimap","valuesByKey","hasKey","hasValue","some","getValuesForKey","getKeysForValue","_key","_values","IndexedMultimap","super","keysByValue","SelectorObserver","_selector","matchesByElement","selectorMatchElement","selectorMatched","selectors","selectorUnmatched","_attributeName","matchedBefore","StringMapObserver","stringMap","attributeOldValue","knownAttributeNames","refreshAttribute","oldValue","getStringMapKeyForAttribute","stringMapKeyAdded","stringMapValueChanged","stringMapKeyRemoved","currentAttributeNames","recordedAttributeNames","attribute","TokenListObserver","attributeObserver","tokensByElement","tokensMatched","readTokensForElement","unmatchedTokens","matchedTokens","refreshTokensForElement","tokensUnmatched","tokens","token","tokenMatched","tokenUnmatched","previousTokens","currentTokens","firstDifferingIndex","length","Math","max","zip","findIndex","previousToken","currentToken","content","tokenString","trim","split","parseTokenString","ValueListObserver","tokenListObserver","parseResultsByToken","WeakMap","valuesByTokenByElement","fetchParseResultForToken","fetchValuesByTokenForElement","elementMatchedValue","elementUnmatchedValue","parseResult","parseToken","valuesByToken","parseValueForToken","BindingObserver","bindingsByAction","valueListObserver","actionAttribute","disconnectAllActions","schema","connectAction","disconnectAction","clear","forToken","descriptorString","keyFilter","includes","options","test","parseActionDescriptorString","descriptor","tagName","getDefaultEventNameForElement","toString","eventFilter","filteres","modifiers","meta","ctrl","alt","shift","modifier","metaKey","ctrlKey","altKey","shiftKey","standardFilter","keyMappings","pattern","RegExp","ValueObserver","receiver","stringMapObserver","valueDescriptorMap","invokeChangedCallbacksForDefaultValues","invokeChangedCallback","writer","defaultValue","valueDescriptorNameMap","valueDescriptors","undefined","data","rawValue","rawOldValue","changedMethodName","changedMethod","reader","TypeError","descriptors","hasMethodName","TargetObserver","targetsByName","disconnectAllTargets","connectTarget","disconnectTarget","targetConnected","targetDisconnected","readInheritableStaticArrayValues","propertyName","ancestors","getAncestorsForConstructor","definition","isArray","getOwnStaticArrayValues","readInheritableStaticObjectPairs","pairs","getOwnStaticObjectPairs","getPrototypeOf","reverse","OutletObserver","outletsByName","outletElementsByName","selectorObserverMap","attributeObserverMap","outletDefinitions","outletName","setupSelectorObserverForOutlet","setupAttributeObserverForOutlet","dependentContexts","observer","disconnectAllOutlets","stopSelectorObservers","stopAttributeObservers","outlet","getOutlet","connectOutlet","getOutletFromMap","disconnectOutlet","hasOutlet","hasOutletController","controllerAttribute","_element","getOutletNameFromOutletAttributeName","updateSelectorObserverForOutlet","outletConnected","outletDisconnected","selectorObserver","body","attributeNameForOutletName","outlets","getSelectorForOutletName","outletAttributeForScope","find","outletDependencies","dependencies","router","modules","module","controllerConstructor","dependentControllerIdentifiers","identifiers","contexts","getControllerForElementAndIdentifier","Context","functionName","bindingObserver","dispatcher","valueObserver","targetObserver","outletObserver","initialize","parentElement","invokeControllerMethod","args","bless","properties","shadowConstructor","extend","shadowProperties","getOwnKeys","shadowingDescriptor","getOwnPropertyDescriptor","getShadowedDescriptor","getShadowProperties","defineProperties","shadow","blessedProperties","blessing","getBlessedProperties","getOwnPropertySymbols","getOwnPropertyNames","extendWithReflect","extended","Reflect","construct","arguments","create","setPrototypeOf","b","testReflectExtension","Module","blessDefinition","contextsByScope","connectedContexts","connectContextForScope","fetchContextForScope","disconnectContextForScope","ClassMap","getDataKey","getAll","getAttributeName","getAttributeNameForKey","DataMap","setAttribute","removeAttribute","Guide","logger","warn","warnedKeys","warnedKeysByObject","attributeValueContainsToken","TargetSet","targetName","targetNames","findTarget","findLegacyTarget","findAll","targets","findAllTargets","findAllLegacyTargets","getSelectorForTargetName","findElement","findAllElements","targetAttributeForScope","getLegacySelectorForTargetName","deprecate","targetDescriptor","targetAttribute","revisedAttributeName","guide","OutletSet","controllerElement","outletNames","findOutlet","findAllOutlets","queryElements","matchesElement","Scope","closest","controllerSelector","documentScope","isDocumentScope","documentElement","ScopeObserver","scopesByIdentifierByElement","scopeReferenceCounts","scopesByIdentifier","fetchScopesByIdentifierForElement","createScopeForElementAndIdentifier","referenceCount","scopeConnected","scopeDisconnected","Router","scopeObserver","modulesByIdentifier","loadDefinition","unloadIdentifier","connectModule","afterLoad","disconnectModule","getContextForElementAndIdentifier","defaultSchema","enter","tab","esc","space","up","down","home","end","objectFromEntries","c","n","array","memo","k","v","Application","console","debug","logFormattedMessage","Promise","resolve","readyState","register","load","registerActionOption","head","rest","shouldLoad","unload","controllers","onerror","groupCollapsed","log","groupEnd","parseValueDefinitionPair","typeDefinition","payload","typeFromObject","typeObject","hasType","hasDefault","default","fullObject","onlyType","onlyDefault","parseValueTypeConstant","typeFromDefaultValue","parseValueTypeDefault","parseValueTypeObject","typeFromConstant","parseValueTypeDefinition","constant","defaultValuesByType","constantFromType","defaultValueForDefinition","hasCustomDefaultValue","readers","writers","valueDescriptorForTokenAndTypeDefinition","Boolean","Number","String","boolean","number","string","writeJSON","stringify","Controller","_identifier","_application","classes","dispatch","prefix","bubbles","cancelable","CustomEvent","dispatchEvent","classDefinition","targetDefinition","valueDefinitionPairs","propertyDescriptorMap","result","valueDefinitionPair","valueDescriptor","read","write","propertiesForValueDefinitionPair","outletDefinition","camelizedName","outletController","propertiesForOutletDefinition"],"mappings":"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"}